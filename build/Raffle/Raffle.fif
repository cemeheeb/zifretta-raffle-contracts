"Asm.fif" include
// automatically generated from raffle.tolk, constants.tolk, errors.tolk, storage.tolk, messages.tolk
PROGRAM{
  DECLPROC RaffleCandidateStorage.load()
  DECLPROC RaffleCandidateStorage.save()
  DECLPROC RaffleParticipantStorage.load()
  DECLPROC RaffleParticipantStorage.save()
  0 DECLMETHOD onInternalMessage()
  116022 DECLMETHOD deadline()
  109906 DECLMETHOD participantQuantity()
  92863 DECLMETHOD raffleCandidateAddress()
  77229 DECLMETHOD raffleParticipantAddress()
  // 4 functions inlined in-place:
  // - RaffleStorage.load (7 calls)
  // - RaffleStorage.save (1 call)
  // - calculateRaffleCandidateAddress (4 calls)
  // - calculateRaffleParticipantAddress (2 calls)
  // contracts/storage.tolk:32  (note: function never called!)
  RaffleCandidateStorage.load() PROC:<{	// 
    // 33: return RaffleCandidateStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '0
    CTOS                    	//  s
    LDMSGADDR               	//  '4 s
    LDMSGADDR               	//  '4 '5 s
    256 LDU                 	//  '4 '5 '7 s
    1 LDU                   	//  '4 '5 '7 '10 s
    SWAP                    	//  '4 '5 '7 s '10
    IF:<{                   	//  '4 '5 '7 s
      64 LDU                	//  '4 '5 '7 '8 s
    }>ELSE<{                	//  '4 '5 '7 s
      PUSHNULL              	//  '4 '5 '7 s '8
      SWAP                  	//  '4 '5 '7 '8 s
    }>
    ENDS                    	//  '4 '5 '7 '8
  }>
  // contracts/storage.tolk:36  (note: function never called!)
  RaffleCandidateStorage.save() PROC:<{	//  self.raffleAddress self.userAddress self.conditions self.participantIndex
    // 37: contract.setData(self.toCell())
    s0 s3 XCHG
    NEWC                    	//  self.participantIndex self.userAddress self.conditions self.raffleAddress b
    STSLICE                 	//  self.participantIndex self.userAddress self.conditions b
    s1 s2 XCHG              	//  self.participantIndex self.conditions self.userAddress b
    STSLICE                 	//  self.participantIndex self.conditions b
    256 STU                 	//  self.participantIndex b
    OVER                    	//  self.participantIndex b self.participantIndex
    ISNULL                  	//  self.participantIndex b '7
    IF:<{                   	//  self.participantIndex b
      NIP                   	//  b
      b{0} STSLICECONST     	//  b
    }>ELSE<{                	//  self.participantIndex b
      b{1} STSLICECONST     	//  self.participantIndex b
      64 STU                	//  b
    }>
    ENDC                    	//  '13
    c4 POP                  	// 
  }>
  // contracts/storage.tolk:48  (note: function never called!)
  RaffleParticipantStorage.load() PROC:<{	// 
    // 49: return RaffleParticipantStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '0
    CTOS                    	//  s
    LDMSGADDR               	//  '4 s
    64 LDU                  	//  '4 '6 s
    1 LDU                   	//  '4 '6 '9 s
    SWAP                    	//  '4 '6 s '9
    IF:<{                   	//  '4 '6 s
      LDMSGADDR             	//  '4 '6 '7 s
    }>ELSE<{                	//  '4 '6 s
      PUSHNULL              	//  '4 '6 s '7
      SWAP                  	//  '4 '6 '7 s
    }>
    ENDS                    	//  '4 '6 '7
  }>
  // contracts/storage.tolk:52  (note: function never called!)
  RaffleParticipantStorage.save() PROC:<{	//  self.raffleAddress self.participantIndex self.userAddress
    // 53: contract.setData(self.toCell())
    s0 s2 XCHG
    NEWC                    	//  self.userAddress self.participantIndex self.raffleAddress b
    STSLICE                 	//  self.userAddress self.participantIndex b
    64 STU                  	//  self.userAddress b
    OVER                    	//  self.userAddress b self.userAddress
    ISNULL                  	//  self.userAddress b '6
    IF:<{                   	//  self.userAddress b
      NIP                   	//  b
      b{0} STSLICECONST     	//  b
    }>ELSE<{                	//  self.userAddress b
      b{1} STSLICECONST     	//  self.userAddress b
      STSLICE               	//  b
    }>
    ENDC                    	//  '11
    c4 POP                  	// 
  }>
  // contracts/raffle.tolk:11
  onInternalMessage() PROC:<{ 	//  in.body
    // 11: fun onInternalMessage(inMessage: InMessage)
    INMSG_BOUNCED           	//  in.body '1
    0 THROWIF               	//  in.body
    // 12: val inMessageBody = lazy AllowedMessageRaffleParticipant.fromSlice(inMessage.body)
    DUP                     	//  in.body lazyS
    // 14: match (inMessageBody)
    x{70000000} SDBEGINSQ   	//  in.body lazyS '12
    IFJMP:<{                	//  in.body lazyS
      2DROP                 	// 
      // 16: assert (inMessage.valueCoins >= MIN_TONS_FOR_CANDIDATE_STORAGE + REGISTER_CANDIDATE_FEE * 3) throw ERROR_INSUFFICIENT_FUNDS
      20481 PUSHINT         	//  '15=20481
      INMSG_VALUE           	//  '15=20481 '16
      25000000 PUSHINT      	//  '15=20481 '16 '22
      GEQ                   	//  '15=20481 '23
      THROWANYIFNOT         	// 
      c4 PUSH               	//  '32
      // 18: val storage = lazy RaffleStorage.load()
      CTOS                  	//  lazyS
      // 20: assert (blockchain.now() < storage.deadline) throw ERROR_EXPIRED
      LDMSGADDR             	//  '36 lazyS
      NIP                   	//  lazyS
      64 LDU                	//  storage.deadline lazyS
      PLDREF                	//  storage.deadline storage.candidateCode
      16385 PUSHINT         	//  storage.deadline storage.candidateCode '40=16385
      NOW                   	//  storage.deadline storage.candidateCode '40=16385 '41
      s0 s3 XCHG2           	//  '40=16385 storage.candidateCode '41 storage.deadline
      LESS                  	//  '40=16385 storage.candidateCode '42
      s1 s2 XCHG            	//  storage.candidateCode '40=16385 '42
      THROWANYIFNOT         	//  storage.candidateCode
      // 24: dest: calculateRaffleCandidateAddress(contract.getAddress(), inMessage.senderAddress, storage.candidateCode)
      MYADDR                	//  storage.candidateCode '46
      INMSG_SRC             	//  storage.candidateCode '46 '47
      // 57: val data: RaffleCandidateStorage = { raffleAddress, userAddress, conditions: 0, participantIndex: null }
      PUSHNULL              	//  storage.candidateCode data.raffleAddress data.userAddress data.participantIndex
      // 63: data: data.toCell()
      s0 s2 XCHG
      NEWC                  	//  storage.candidateCode data.participantIndex data.userAddress data.raffleAddress b
      STSLICE               	//  storage.candidateCode data.participantIndex data.userAddress b
      STSLICE               	//  storage.candidateCode data.participantIndex b
      0 PUSHINT
      256 STUR              	//  storage.candidateCode data.participantIndex b
      OVER                  	//  storage.candidateCode data.participantIndex b data.participantIndex
      ISNULL                	//  storage.candidateCode data.participantIndex b '66
      IF:<{                 	//  storage.candidateCode data.participantIndex b
        NIP                 	//  storage.candidateCode b
        b{0} STSLICECONST   	//  storage.candidateCode b
      }>ELSE<{              	//  storage.candidateCode data.participantIndex b
        b{1} STSLICECONST   	//  storage.candidateCode data.participantIndex b
        64 STU              	//  storage.candidateCode b
      }>
      ENDC                  	//  'USlot1 'USlot2
      // 26: body: beginCell().endCell()
      NEWC                  	//  'USlot1 'USlot2 '81
      ENDC                  	//  'USlot2 'USlot3 '95
      // 22: val deployRaffleCandidateMessage = createMessage(
      NEWC                  	//  'USlot2 'USlot3 '95 b
      b{01000010000000000} STSLICECONST	//  'USlot2 'USlot3 '95 b
      2OVER                 	//  'USlot2 'USlot3 '95 b 'USlot2 'USlot3
                       // code data
          DUP2            // code data code data
          HASHCU
          SWAP
          HASHCU          // code data dataHash codeHash
          SWAP2           // dataHash codeHash code data
          CDEPTH
          SWAP
          CDEPTH          // dataHash codeHash dataDepth codeDepth
          NEWC
          x{020134} STSLICECONST // store refs_descriptor | bits_descriptor | data
          16 STU                 // store codeDepth
          16 STU                 // store dataDepth
          256 STU                // store codeHash
          256 STU                // store dataHash
          ONE HASHEXT_SHA256	//  'USlot2 'USlot3 '95 b '117
      256 STUR              	//  'USlot2 'USlot3 '95 b
      141 PUSHINT
      117 STUR              	//  'USlot2 'USlot3 '95 b
      s1 s3 XCHG            	//  '95 'USlot3 'USlot2 b
      STREF                 	//  '95 'USlot3 b
      STREF                 	//  '95 b
      STREF                 	//  b
      ENDC                  	//  deployRaffleCandidateMessage
      // 29: deployRaffleCandidateMessage.send(SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE)
      64 PUSHINT            	//  deployRaffleCandidateMessage '145=64
      SENDRAWMSG            	// 
    }>                      	//  in.body lazyS
    // 14: match (inMessageBody)
    x{80000000} SDBEGINSQ   	//  in.body lazyS '12
    IFJMP:<{                	//  in.body lazyS
      // 32: assert (inMessage.valueCoins >= MIN_TONS_FOR_PARTICIPANT_STORAGE + APPROVE_CANDIDATE_OPERATION_FEE * 3) throw ERROR_INSUFFICIENT_FUNDS
      NIP                   	//  lazyS
      20481 PUSHINT         	//  lazyS '148=20481
      INMSG_VALUE           	//  lazyS '148=20481 '149
      25000000 PUSHINT      	//  lazyS '148=20481 '149 '155
      GEQ                   	//  lazyS '148=20481 '156
      THROWANYIFNOT         	//  lazyS
      // 16: return RaffleStorage.fromCell(contract.getData())
      c4 PUSH               	//  lazyS '165
      // 34: var storage = lazy RaffleStorage.load()
      CTOS                  	//  lazyS lazyS
      // 35: assert (inMessage.senderAddress == storage.ownerAddress) throw ERROR_NOT_AUTHORIZED
      LDMSGADDR             	//  lazyS storage.ownerAddress lazyS
      64 LDSLICE            	//  lazyS storage.ownerAddress '171 lazyS
      256 LDU               	//  lazyS storage.ownerAddress '171 storage.conditions lazyS
      LDREF                 	//  lazyS storage.ownerAddress '171 storage.conditions storage.candidateCode lazyS
      LDREF                 	//  lazyS storage.ownerAddress '171 storage.conditions storage.candidateCode '175 lazyS
      64 PLDU               	//  lazyS storage.ownerAddress '171 storage.conditions storage.candidateCode '175 storage.participantQuantity
      4919 PUSHINT          	//  lazyS storage.ownerAddress '171 storage.conditions storage.candidateCode '175 storage.participantQuantity '178=4919
      INMSG_SRC             	//  lazyS storage.ownerAddress '171 storage.conditions storage.candidateCode '175 storage.participantQuantity '178=4919 '179
      s7 PUSH               	//  lazyS storage.ownerAddress '171 storage.conditions storage.candidateCode '175 storage.participantQuantity '178=4919 '179 storage.ownerAddress
      SDEQ                  	//  lazyS storage.ownerAddress '171 storage.conditions storage.candidateCode '175 storage.participantQuantity '178=4919 '181
      THROWANYIFNOT         	//  lazyS storage.ownerAddress '171 storage.conditions storage.candidateCode '175 storage.participantQuantity
      // 37: val destination = calculateRaffleCandidateAddress(contract.getAddress(), inMessageBody.userAddress, storage.candidateCode)
      s0 s6 XCHG            	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 lazyS
      LDMSGADDR             	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 lazyS
      256 PLDU              	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2
      MYADDR                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 '193
      // 57: val data: RaffleCandidateStorage = { raffleAddress, userAddress, conditions: 0, participantIndex: null }
      PUSHNULL              	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 '193 '206
      s3 PUSH               	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.raffleAddress data.participantIndex data.userAddress
      // 63: data: data.toCell()
      s0 s2 XCHG
      NEWC                  	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.userAddress data.participantIndex data.raffleAddress b
      STSLICE               	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.userAddress data.participantIndex b
      s1 s2 XCHG            	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.participantIndex data.userAddress b
      STSLICE               	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.participantIndex b
      0 PUSHINT
      256 STUR              	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.participantIndex b
      OVER                  	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.participantIndex b data.participantIndex
      ISNULL                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.participantIndex b '211
      IF:<{                 	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.participantIndex b
        NIP                 	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 b
        b{0} STSLICECONST   	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 b
      }>ELSE<{              	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.participantIndex b
        b{1} STSLICECONST   	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 data.participantIndex b
        64 STU              	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 b
      }>
      ENDC                  	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 '217
      s4 s5 s1 PUSH3        	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 destination.stateInit.USlot2 destination.stateInit.USlot1 storage.conditions inMessageBody.USlot2
      // 38: if (storage.conditions == inMessageBody.conditions)
      EQUAL                 	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 destination.stateInit.USlot2 destination.stateInit.USlot1 '222
      IF:<{                 	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 destination.stateInit.USlot2 destination.stateInit.USlot1
        // 40: bounce: true
        s2 POP              	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 destination.stateInit.USlot1 destination.stateInit.USlot2
        // 41: dest: address.fromValidBuilder(destination.buildAddress())
                         // code data
            DUP2            // code data code data
            HASHCU
            SWAP
            HASHCU          // code data dataHash codeHash
            SWAP2           // dataHash codeHash code data
            CDEPTH
            SWAP
            CDEPTH          // dataHash codeHash dataDepth codeDepth
            NEWC
            x{020134} STSLICECONST // store refs_descriptor | bits_descriptor | data
            16 STU                 // store codeDepth
            16 STU                 // store dataDepth
            256 STU                // store codeHash
            256 STU                // store dataHash
            ONE HASHEXT_SHA256	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 '233
        NEWC                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 '233 '232
        b{10000000000} STSLICECONST	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 '233 '232
        256 STU             	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 '232
        ENDC
        CTOS                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 '252
        // 39: val approveCandidateMessage = createMessage(
        NEWC                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 '252 b
        b{011000} STSLICECONST	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 '252 b
        STSLICE             	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 b
        2415919104 PUSHINTX
        143 STUR            	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 b
        STSLICE             	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 b
        s6 PUSH             	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 b storage.participantQuantity
        64 STUR             	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 b
        ENDC                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 approveCandidateMessage
        // 49: approveCandidateMessage.send(SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE)
        64 PUSHINT          	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 approveCandidateMessage '312=64
        SENDRAWMSG          	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175
        // 50: storage.participantQuantity += 1
        s0 s5 XCHG          	//  '175 storage.ownerAddress '171 storage.conditions storage.candidateCode storage.participantQuantity
        INC                 	//  '175 storage.ownerAddress '171 storage.conditions storage.candidateCode storage.participantQuantity
      }>ELSE<{              	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 destination.stateInit.USlot2 destination.stateInit.USlot1
        // 54: dest: address.fromValidBuilder(destination.buildAddress())
        SWAP                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 destination.stateInit.USlot1 destination.stateInit.USlot2
                         // code data
            DUP2            // code data code data
            HASHCU
            SWAP
            HASHCU          // code data dataHash codeHash
            SWAP2           // dataHash codeHash code data
            CDEPTH
            SWAP
            CDEPTH          // dataHash codeHash dataDepth codeDepth
            NEWC
            x{020134} STSLICECONST // store refs_descriptor | bits_descriptor | data
            16 STU                 // store codeDepth
            16 STU                 // store dataDepth
            256 STU                // store codeHash
            256 STU                // store dataHash
            ONE HASHEXT_SHA256	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 '325
        NEWC                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 '325 '324
        b{10000000000} STSLICECONST	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 '325 '324
        256 STU             	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 '324
        ENDC
        CTOS                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 '344
        // 52: val setConditionsMessage = createMessage(
        NEWC                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 '344 refb
        x{80000001} STSLICECONST	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 inMessageBody.USlot1 inMessageBody.USlot2 '344 refb
        s1 s3 XCHG          	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 '344 inMessageBody.USlot2 inMessageBody.USlot1 refb
        STSLICE             	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 '344 inMessageBody.USlot2 refb
        256 STU             	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 '344 refb
        ENDC                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 '344 '368
        NEWC                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 '344 '368 b
        b{011000} STSLICECONST	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 '344 '368 b
        s1 s2 XCHG          	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 '368 '344 b
        STSLICE             	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 '368 b
        1 PUSHINT
        111 STUR            	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 '368 b
        STREF               	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 b
        ENDC                	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 setConditionsMessage
        // 62: setConditionsMessage.send(SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE)
        64 PUSHINT          	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175 setConditionsMessage '406=64
        SENDRAWMSG          	//  storage.participantQuantity storage.ownerAddress '171 storage.conditions storage.candidateCode '175
        // 38: if (storage.conditions == inMessageBody.conditions)
        s0 s5 XCHG          	//  '175 storage.ownerAddress '171 storage.conditions storage.candidateCode storage.participantQuantity
      }>
      // 20: contract.setData(self.toCell())
      s0 s4 XCHG
      NEWC                  	//  '175 storage.participantQuantity '171 storage.conditions storage.candidateCode storage.ownerAddress b
      STSLICE               	//  '175 storage.participantQuantity '171 storage.conditions storage.candidateCode b
      s1 s3 XCHG            	//  '175 storage.participantQuantity storage.candidateCode storage.conditions '171 b
      STSLICE               	//  '175 storage.participantQuantity storage.candidateCode storage.conditions b
      256 STU               	//  '175 storage.participantQuantity storage.candidateCode b
      STREF                 	//  '175 storage.participantQuantity b
      s1 s2 XCHG            	//  storage.participantQuantity '175 b
      STREF                 	//  storage.participantQuantity b
      64 STU                	//  b
      ENDC                  	//  '411
      c4 POP                	// 
    }>                      	//  in.body lazyS
    // 14: match (inMessageBody)
    x{90000000} SDBEGINSQ   	//  in.body lazyS '12
    IFJMP:<{                	//  in.body lazyS
      // 68: assert (inMessage.valueCoins >= MIN_TONS_FOR_PARTICIPANT_STORAGE + APPROVE_CANDIDATE_OPERATION_FEE * 3) throw ERROR_INSUFFICIENT_FUNDS
      NIP                   	//  lazyS
      20481 PUSHINT         	//  lazyS '414=20481
      INMSG_VALUE           	//  lazyS '414=20481 '415
      25000000 PUSHINT      	//  lazyS '414=20481 '415 '421
      GEQ                   	//  lazyS '414=20481 '422
      THROWANYIFNOT         	//  lazyS
      // 16: return RaffleStorage.fromCell(contract.getData())
      c4 PUSH               	//  lazyS '431
      // 69: var storage = lazy RaffleStorage.load()
      CTOS                  	//  lazyS lazyS
      // 71: val raffleCandidateAddress = calculateRaffleCandidateAddress(contract.getAddress(), inMessageBody.userAddress, storage.candidateCode)
      SWAP                  	//  lazyS lazyS
      LDMSGADDR             	//  lazyS inMessageBody.USlot1 lazyS
      64 PLDU               	//  lazyS inMessageBody.USlot1 inMessageBody.USlot2
      s0 s2 XCHG            	//  inMessageBody.USlot2 inMessageBody.USlot1 lazyS
      LDMSGADDR             	//  inMessageBody.USlot2 inMessageBody.USlot1 '438 lazyS
      NIP                   	//  inMessageBody.USlot2 inMessageBody.USlot1 lazyS
      320 PUSHINT
      SDSKIPFIRST           	//  inMessageBody.USlot2 inMessageBody.USlot1 lazyS
      LDREF                 	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode lazyS
      LDREF                 	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode lazyS
      64 PLDU               	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity
      MYADDR                	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity '451
      // 57: val data: RaffleCandidateStorage = { raffleAddress, userAddress, conditions: 0, participantIndex: null }
      PUSHNULL              	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity '451 '464
      s5 PUSH               	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.raffleAddress data.participantIndex data.userAddress
      // 63: data: data.toCell()
      s0 s2 XCHG
      NEWC                  	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.userAddress data.participantIndex data.raffleAddress b
      STSLICE               	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.userAddress data.participantIndex b
      s1 s2 XCHG            	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.participantIndex data.userAddress b
      STSLICE               	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.participantIndex b
      0 PUSHINT
      256 STUR              	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.participantIndex b
      OVER                  	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.participantIndex b data.participantIndex
      ISNULL                	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.participantIndex b '469
      IF:<{                 	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.participantIndex b
        NIP                 	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity b
        b{0} STSLICECONST   	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity b
      }>ELSE<{              	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.participantIndex b
        b{1} STSLICECONST   	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity data.participantIndex b
        64 STU              	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.candidateCode storage.participantCode storage.participantQuantity b
      }>
      ENDC                  	//  inMessageBody.USlot2 inMessageBody.USlot1 raffleCandidateAddress.stateInit.USlot1 storage.participantCode storage.participantQuantity raffleCandidateAddress.stateInit.USlot2
      // 72: assert (inMessage.senderAddress == address.fromValidBuilder(raffleCandidateAddress.buildAddress())) throw ERROR_NOT_AUTHORIZED
      4919 PUSHINT          	//  inMessageBody.USlot2 inMessageBody.USlot1 raffleCandidateAddress.stateInit.USlot1 storage.participantCode storage.participantQuantity raffleCandidateAddress.stateInit.USlot2 '480=4919
      INMSG_SRC             	//  inMessageBody.USlot2 inMessageBody.USlot1 raffleCandidateAddress.stateInit.USlot1 storage.participantCode storage.participantQuantity raffleCandidateAddress.stateInit.USlot2 '480=4919 '481
      s5 s2 XCHG2           	//  inMessageBody.USlot2 inMessageBody.USlot1 '480=4919 storage.participantCode storage.participantQuantity '481 raffleCandidateAddress.stateInit.USlot1 raffleCandidateAddress.stateInit.USlot2
                       // code data
          DUP2            // code data code data
          HASHCU
          SWAP
          HASHCU          // code data dataHash codeHash
          SWAP2           // dataHash codeHash code data
          CDEPTH
          SWAP
          CDEPTH          // dataHash codeHash dataDepth codeDepth
          NEWC
          x{020134} STSLICECONST // store refs_descriptor | bits_descriptor | data
          16 STU                 // store codeDepth
          16 STU                 // store dataDepth
          256 STU                // store codeHash
          256 STU                // store dataHash
          ONE HASHEXT_SHA256	//  inMessageBody.USlot2 inMessageBody.USlot1 '480=4919 storage.participantCode storage.participantQuantity '481 '488
      NEWC                  	//  inMessageBody.USlot2 inMessageBody.USlot1 '480=4919 storage.participantCode storage.participantQuantity '481 '488 '487
      b{10000000000} STSLICECONST	//  inMessageBody.USlot2 inMessageBody.USlot1 '480=4919 storage.participantCode storage.participantQuantity '481 '488 '487
      256 STU               	//  inMessageBody.USlot2 inMessageBody.USlot1 '480=4919 storage.participantCode storage.participantQuantity '481 '487
      ENDC
      CTOS                  	//  inMessageBody.USlot2 inMessageBody.USlot1 '480=4919 storage.participantCode storage.participantQuantity '481 '507
      SDEQ                  	//  inMessageBody.USlot2 inMessageBody.USlot1 '480=4919 storage.participantCode storage.participantQuantity '508
      s1 s3 XCHG            	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.participantQuantity storage.participantCode '480=4919 '508
      THROWANYIFNOT         	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.participantQuantity storage.participantCode
      // 76: dest: calculateRaffleParticipantAddress(contract.getAddress(), storage.participantQuantity, storage.participantCode)
      MYADDR                	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.participantQuantity storage.participantCode '512
      // 69: val data: RaffleParticipantStorage = { raffleAddress, participantIndex, userAddress: createAddressNone() }
      b{00} PUSHSLICE       	//  inMessageBody.USlot2 inMessageBody.USlot1 data.participantIndex storage.participantCode data.raffleAddress data.userAddress
      // 75: data: data.toCell()
      SWAP
      NEWC                  	//  inMessageBody.USlot2 inMessageBody.USlot1 data.participantIndex storage.participantCode data.userAddress data.raffleAddress b
      STSLICE               	//  inMessageBody.USlot2 inMessageBody.USlot1 data.participantIndex storage.participantCode data.userAddress b
      s1 s3 XCHG            	//  inMessageBody.USlot2 inMessageBody.USlot1 data.userAddress storage.participantCode data.participantIndex b
      64 STU                	//  inMessageBody.USlot2 inMessageBody.USlot1 data.userAddress storage.participantCode b
      s2 PUSH               	//  inMessageBody.USlot2 inMessageBody.USlot1 data.userAddress storage.participantCode b data.userAddress
      ISNULL                	//  inMessageBody.USlot2 inMessageBody.USlot1 data.userAddress storage.participantCode b '528
      IF:<{                 	//  inMessageBody.USlot2 inMessageBody.USlot1 data.userAddress storage.participantCode b
        1 2 BLKDROP2        	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.participantCode b
        b{0} STSLICECONST   	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.participantCode b
      }>ELSE<{              	//  inMessageBody.USlot2 inMessageBody.USlot1 data.userAddress storage.participantCode b
        b{1} STSLICECONST   	//  inMessageBody.USlot2 inMessageBody.USlot1 data.userAddress storage.participantCode b
        s1 s2 XCHG          	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.participantCode data.userAddress b
        STSLICE             	//  inMessageBody.USlot2 inMessageBody.USlot1 storage.participantCode b
      }>
      ENDC                  	//  inMessageBody.USlot2 inMessageBody.USlot1 'USlot1 'USlot2
      // 77: value: inMessage.valueCoins
      INMSG_VALUE           	//  '556 '555 'USlot2 'USlot3 'USlot2
      // 74: val registerParticipantMessage = createMessage(
      NEWC                  	//  '556 '555 'USlot2 'USlot3 'USlot2 b
      b{01000010000000000} STSLICECONST	//  '556 '555 'USlot2 'USlot3 'USlot2 b
      2OVER                 	//  '556 '555 'USlot2 'USlot3 'USlot2 b 'USlot2 'USlot3
                       // code data
          DUP2            // code data code data
          HASHCU
          SWAP
          HASHCU          // code data dataHash codeHash
          SWAP2           // dataHash codeHash code data
          CDEPTH
          SWAP
          CDEPTH          // dataHash codeHash dataDepth codeDepth
          NEWC
          x{020134} STSLICECONST // store refs_descriptor | bits_descriptor | data
          16 STU                 // store codeDepth
          16 STU                 // store dataDepth
          256 STU                // store codeHash
          256 STU                // store dataHash
          ONE HASHEXT_SHA256	//  '556 '555 'USlot2 'USlot3 'USlot2 b '578
      256 STUR              	//  '556 '555 'USlot2 'USlot3 'USlot2 b
      SWAP                  	//  '556 '555 'USlot2 'USlot3 b 'USlot2
      STGRAMS               	//  '556 '555 'USlot2 'USlot3 b
      140 PUSHINT
      113 STUR              	//  '556 '555 'USlot2 'USlot3 b
      s1 s2 XCHG            	//  '556 '555 'USlot3 'USlot2 b
      STREF                 	//  '556 '555 'USlot3 b
      STREF                 	//  '556 '555 b
      x{90000000} STSLICECONST	//  '556 '555 b
      STSLICE               	//  '556 b
      64 STU                	//  b
      ENDC                  	//  registerParticipantMessage
      // 81: registerParticipantMessage.send(SEND_MODE_PAY_FEES_SEPARATELY)
      1 PUSHINT             	//  registerParticipantMessage '609=1
      SENDRAWMSG            	// 
    }>                      	//  in.body lazyS
    // 85: assert (inMessage.body.isEmpty()) throw 0xFFFF
    DROP                    	//  in.body
    16 PUSHPOW2DEC          	//  in.body '610=65535
    SWAP                    	//  '610=65535 in.body
    SEMPTY                  	//  '610=65535 '611
    THROWANYIFNOT           	// 
  }>
  // contracts/raffle.tolk:90:5
  deadline() PROC:<{          	// 
    // 16: return RaffleStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '7
    // 91: val storage = lazy RaffleStorage.load()
    CTOS                    	//  lazyS
    // 92: return storage.deadline
    LDMSGADDR               	//  '11 lazyS
    NIP                     	//  lazyS
    64 PLDU                 	//  storage.deadline
  }>
  // contracts/raffle.tolk:95:5
  participantQuantity() PROC:<{	// 
    // 16: return RaffleStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '7
    // 96: val storage = lazy RaffleStorage.load()
    CTOS                    	//  lazyS
    // 97: return storage.participantQuantity
    LDMSGADDR               	//  '11 lazyS
    NIP                     	//  lazyS
    320 PUSHINT
    SDSKIPFIRST             	//  lazyS
    64 PLDU                 	//  storage.participantQuantity
  }>
  // contracts/raffle.tolk:100:5
  raffleCandidateAddress() PROC:<{	//  userAddress
    // 16: return RaffleStorage.fromCell(contract.getData())
    c4 PUSH                 	//  userAddress '8
    // 101: val storage = lazy RaffleStorage.load()
    CTOS                    	//  userAddress lazyS
    // 102: val candidateAddress = calculateRaffleCandidateAddress(contract.getAddress(), userAddress, storage.candidateCode)
    PLDREF                  	//  userAddress storage.candidateCode
    MYADDR                  	//  userAddress storage.candidateCode '20
    // 57: val data: RaffleCandidateStorage = { raffleAddress, userAddress, conditions: 0, participantIndex: null }
    PUSHNULL                	//  data.userAddress storage.candidateCode data.raffleAddress data.participantIndex
    // 63: data: data.toCell()
    SWAP
    NEWC                    	//  data.userAddress storage.candidateCode data.participantIndex data.raffleAddress b
    STSLICE                 	//  data.userAddress storage.candidateCode data.participantIndex b
    s1 s3 XCHG              	//  data.participantIndex storage.candidateCode data.userAddress b
    STSLICE                 	//  data.participantIndex storage.candidateCode b
    0 PUSHINT
    256 STUR                	//  data.participantIndex storage.candidateCode b
    s2 PUSH                 	//  data.participantIndex storage.candidateCode b data.participantIndex
    ISNULL                  	//  data.participantIndex storage.candidateCode b '38
    IF:<{                   	//  data.participantIndex storage.candidateCode b
      1 2 BLKDROP2          	//  storage.candidateCode b
      b{0} STSLICECONST     	//  storage.candidateCode b
    }>ELSE<{                	//  data.participantIndex storage.candidateCode b
      b{1} STSLICECONST     	//  data.participantIndex storage.candidateCode b
      s1 s2 XCHG            	//  storage.candidateCode data.participantIndex b
      64 STU                	//  storage.candidateCode b
    }>
    ENDC                    	//  candidateAddress.stateInit.USlot1 candidateAddress.stateInit.USlot2
    // 103: return address.fromValidBuilder(candidateAddress.buildAddress())
                     // code data
        DUP2            // code data code data
        HASHCU
        SWAP
        HASHCU          // code data dataHash codeHash
        SWAP2           // dataHash codeHash code data
        CDEPTH
        SWAP
        CDEPTH          // dataHash codeHash dataDepth codeDepth
        NEWC
        x{020134} STSLICECONST // store refs_descriptor | bits_descriptor | data
        16 STU                 // store codeDepth
        16 STU                 // store dataDepth
        256 STU                // store codeHash
        256 STU                // store dataHash
        ONE HASHEXT_SHA256  	//  '54
    NEWC                    	//  '54 '53
    b{10000000000} STSLICECONST	//  '54 '53
    256 STU                 	//  '53
    ENDC
    CTOS                    	//  '73
  }>
  // contracts/raffle.tolk:106:5
  raffleParticipantAddress() PROC:<{	//  participantIndex
    // 16: return RaffleStorage.fromCell(contract.getData())
    c4 PUSH                 	//  participantIndex '8
    // 107: val storage = lazy RaffleStorage.load()
    CTOS                    	//  participantIndex lazyS
    // 108: val participantAddress = calculateRaffleParticipantAddress(contract.getAddress(), participantIndex, storage.participantCode)
    LDREF                   	//  participantIndex '12 lazyS
    NIP                     	//  participantIndex lazyS
    PLDREF                  	//  participantIndex storage.participantCode
    MYADDR                  	//  participantIndex storage.participantCode '21
    // 69: val data: RaffleParticipantStorage = { raffleAddress, participantIndex, userAddress: createAddressNone() }
    b{00} PUSHSLICE         	//  data.participantIndex storage.participantCode data.raffleAddress data.userAddress
    // 75: data: data.toCell()
    SWAP
    NEWC                    	//  data.participantIndex storage.participantCode data.userAddress data.raffleAddress b
    STSLICE                 	//  data.participantIndex storage.participantCode data.userAddress b
    s1 s3 XCHG              	//  data.userAddress storage.participantCode data.participantIndex b
    64 STU                  	//  data.userAddress storage.participantCode b
    s2 PUSH                 	//  data.userAddress storage.participantCode b data.userAddress
    ISNULL                  	//  data.userAddress storage.participantCode b '37
    IF:<{                   	//  data.userAddress storage.participantCode b
      1 2 BLKDROP2          	//  storage.participantCode b
      b{0} STSLICECONST     	//  storage.participantCode b
    }>ELSE<{                	//  data.userAddress storage.participantCode b
      b{1} STSLICECONST     	//  data.userAddress storage.participantCode b
      s1 s2 XCHG            	//  storage.participantCode data.userAddress b
      STSLICE               	//  storage.participantCode b
    }>
    ENDC                    	//  participantAddress.stateInit.USlot1 participantAddress.stateInit.USlot2
    // 109: return address.fromValidBuilder(participantAddress.buildAddress())
                     // code data
        DUP2            // code data code data
        HASHCU
        SWAP
        HASHCU          // code data dataHash codeHash
        SWAP2           // dataHash codeHash code data
        CDEPTH
        SWAP
        CDEPTH          // dataHash codeHash dataDepth codeDepth
        NEWC
        x{020134} STSLICECONST // store refs_descriptor | bits_descriptor | data
        16 STU                 // store codeDepth
        16 STU                 // store dataDepth
        256 STU                // store codeHash
        256 STU                // store dataHash
        ONE HASHEXT_SHA256  	//  '52
    NEWC                    	//  '52 '51
    b{10000000000} STSLICECONST	//  '52 '51
    256 STU                 	//  '51
    ENDC
    CTOS                    	//  '71
  }>
}END>c
