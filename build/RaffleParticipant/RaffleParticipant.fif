"Asm.fif" include
// automatically generated from raffle-participant.tolk, storage.tolk, messages.tolk, constants.tolk
PROGRAM{
  DECLPROC RaffleStorage.load()
  DECLPROC RaffleStorage.save()
  DECLPROC RaffleCandidateStorage.load()
  DECLPROC RaffleCandidateStorage.save()
  DECLPROC calculateRaffleCandidateAddress()
  DECLPROC calculateRaffleParticipantAddress()
  0 DECLMETHOD onInternalMessage()
  101383 DECLMETHOD userAddress()
  // 2 functions inlined in-place:
  // - RaffleParticipantStorage.load (2 calls)
  // - RaffleParticipantStorage.save (1 call)
  // contracts/storage.tolk:14  (note: function never called!)
  RaffleStorage.load() PROC:<{	// 
    // 15: return RaffleStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '0
    CTOS                    	//  s
    LDMSGADDR               	//  '4 s
    64 LDU                  	//  '4 '6 s
    LDREF                   	//  '4 '6 '7 s
    LDREF                   	//  '4 '6 '7 '8 s
    64 LDU                  	//  '4 '6 '7 '8 '10 s
    ENDS                    	//  '4 '6 '7 '8 '10
  }>
  // contracts/storage.tolk:18  (note: function never called!)
  RaffleStorage.save() PROC:<{	//  self.ownerAddress self.raffleID self.candidateCode self.participantCode self.participantQuantity
    // 19: contract.setData(self.toCell())
    s0 s4 XCHG
    NEWC                    	//  self.participantQuantity self.raffleID self.candidateCode self.participantCode self.ownerAddress b
    STSLICE                 	//  self.participantQuantity self.raffleID self.candidateCode self.participantCode b
    s1 s3 XCHG              	//  self.participantQuantity self.participantCode self.candidateCode self.raffleID b
    64 STU                  	//  self.participantQuantity self.participantCode self.candidateCode b
    STREF                   	//  self.participantQuantity self.participantCode b
    STREF                   	//  self.participantQuantity b
    64 STU                  	//  b
    ENDC                    	//  '9
    c4 POP                  	// 
  }>
  // contracts/storage.tolk:30  (note: function never called!)
  RaffleCandidateStorage.load() PROC:<{	// 
    // 31: return RaffleCandidateStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '0
    CTOS                    	//  s
    LDMSGADDR               	//  '4 s
    LDMSGADDR               	//  '4 '5 s
    1 LDU                   	//  '4 '5 '8 s
    SWAP                    	//  '4 '5 s '8
    IF:<{                   	//  '4 '5 s
      64 LDU                	//  '4 '5 '6 s
    }>ELSE<{                	//  '4 '5 s
      PUSHNULL              	//  '4 '5 s '6
      SWAP                  	//  '4 '5 '6 s
    }>
    ENDS                    	//  '4 '5 '6
  }>
  // contracts/storage.tolk:34  (note: function never called!)
  RaffleCandidateStorage.save() PROC:<{	//  self.raffleAddress self.userAddress self.participantIndex
    // 35: contract.setData(self.toCell())
    s0 s2 XCHG
    NEWC                    	//  self.participantIndex self.userAddress self.raffleAddress b
    STSLICE                 	//  self.participantIndex self.userAddress b
    STSLICE                 	//  self.participantIndex b
    OVER                    	//  self.participantIndex b self.participantIndex
    ISNULL                  	//  self.participantIndex b '5
    IF:<{                   	//  self.participantIndex b
      NIP                   	//  b
      b{0} STSLICECONST     	//  b
    }>ELSE<{                	//  self.participantIndex b
      b{1} STSLICECONST     	//  self.participantIndex b
      64 STU                	//  b
    }>
    ENDC                    	//  '11
    c4 POP                  	// 
  }>
  // contracts/storage.tolk:54  (note: function never called!)
  calculateRaffleCandidateAddress() PROC:<{	//  raffleAddress userAddress code
    // 55: val data: RaffleCandidateStorage = { raffleAddress, userAddress, participantIndex: null }
    PUSHNULL                	//  data.raffleAddress data.userAddress code data.participantIndex
    // 58: workchain: MY_WORKCHAIN
    0 PUSHINT               	//  data.raffleAddress data.userAddress code data.participantIndex '7=0
    // 61: data: data.toCell()
    s0 s4 XCHG
    NEWC                    	//  '7=0 data.userAddress code data.participantIndex data.raffleAddress b
    STSLICE                 	//  '7=0 data.userAddress code data.participantIndex b
    s1 s3 XCHG              	//  '7=0 data.participantIndex code data.userAddress b
    STSLICE                 	//  '7=0 data.participantIndex code b
    s2 PUSH                 	//  '7=0 data.participantIndex code b data.participantIndex
    ISNULL                  	//  '7=0 data.participantIndex code b '10
    IF:<{                   	//  '7=0 data.participantIndex code b
      1 2 BLKDROP2          	//  '7=0 code b
      b{0} STSLICECONST     	//  '7=0 code b
    }>ELSE<{                	//  '7=0 data.participantIndex code b
      b{1} STSLICECONST     	//  '7=0 data.participantIndex code b
      s1 s2 XCHG            	//  '7=0 code data.participantIndex b
      64 STU                	//  '7=0 code b
    }>
    ENDC                    	//  '7=0 code '16
    // 59: stateInit:
    129 PUSHINT             	//  '7=0 code '16 '17=129
    PUSHNULL                	//  '7=0 code '16 '17=129 '18
    PUSHNULL                	//  '7=0 code '16 '17=129 '18 '19
    s5 PUSH                 	//  '7=0 code '16 '17=129 '18 '19 '20=0
  }>
  // contracts/storage.tolk:66  (note: function never called!)
  calculateRaffleParticipantAddress() PROC:<{	//  raffleAddress participantIndex code
    // 67: val data: RaffleParticipantStorage = { raffleAddress, participantIndex, userAddress: createAddressNone() }
    b{00} PUSHSLICE         	//  data.raffleAddress data.participantIndex code data.userAddress
    // 70: workchain: MY_WORKCHAIN
    0 PUSHINT               	//  data.raffleAddress data.participantIndex code data.userAddress '7=0
    // 73: data: data.toCell()
    s0 s4 XCHG
    NEWC                    	//  '7=0 data.participantIndex code data.userAddress data.raffleAddress b
    STSLICE                 	//  '7=0 data.participantIndex code data.userAddress b
    s1 s3 XCHG              	//  '7=0 data.userAddress code data.participantIndex b
    64 STU                  	//  '7=0 data.userAddress code b
    s2 PUSH                 	//  '7=0 data.userAddress code b data.userAddress
    ISNULL                  	//  '7=0 data.userAddress code b '11
    IF:<{                   	//  '7=0 data.userAddress code b
      1 2 BLKDROP2          	//  '7=0 code b
      b{0} STSLICECONST     	//  '7=0 code b
    }>ELSE<{                	//  '7=0 data.userAddress code b
      b{1} STSLICECONST     	//  '7=0 data.userAddress code b
      s1 s2 XCHG            	//  '7=0 code data.userAddress b
      STSLICE               	//  '7=0 code b
    }>
    ENDC                    	//  '7=0 code '16
    // 71: stateInit:
    129 PUSHINT             	//  '7=0 code '16 '17=129
    PUSHNULL                	//  '7=0 code '16 '17=129 '18
    PUSHNULL                	//  '7=0 code '16 '17=129 '18 '19
    s5 PUSH                 	//  '7=0 code '16 '17=129 '18 '19 '20=0
  }>
  // contracts/raffle-participant.tolk:8
  onInternalMessage() PROC:<{ 	//  in.body
    // 8: fun onInternalMessage(inMessage: InMessage)
    INMSG_BOUNCED           	//  in.body '1
    0 THROWIF               	//  in.body
    // 9: debug.print("Validate Raffle address")
    x{56616c696461746520526166666c652061646472657373} PUSHSLICE	//  in.body '5
    s0 DUMP DROP            	//  in.body
    // 47: return RaffleParticipantStorage.fromCell(contract.getData())
    c4 PUSH                 	//  in.body '10
    // 11: var storage = lazy RaffleParticipantStorage.load()
    CTOS                    	//  in.body lazyS
    // 12: assert (storage.raffleAddress == inMessage.senderAddress) throw 0x2000
    LDMSGADDR               	//  in.body storage.raffleAddress lazyS
    64 LDSLICE              	//  in.body storage.raffleAddress '16 lazyS
    1 PLDU                  	//  in.body storage.raffleAddress '16 '19
    IF:<{                   	//  in.body storage.raffleAddress '16
    }>ELSE<{                	//  in.body storage.raffleAddress '16
    }>
    13 PUSHPOW2             	//  in.body storage.raffleAddress '16 '22=8192
    INMSG_SRC               	//  in.body storage.raffleAddress '16 '22=8192 '23
    s3 PUSH                 	//  in.body storage.raffleAddress '16 '22=8192 '23 storage.raffleAddress
    SDEQ                    	//  in.body storage.raffleAddress '16 '22=8192 '25
    THROWANYIFNOT           	//  in.body storage.raffleAddress '16
    // 14: val inMessageBody = lazy AllowedMessageParticipant.fromSlice(inMessage.body)
    s2 PUSH                 	//  in.body storage.raffleAddress '16 lazyS
    // 16: match (inMessageBody)
    x{80000001} SDBEGINSQ   	//  in.body storage.raffleAddress '16 lazyS '33
    IFJMP:<{                	//  in.body storage.raffleAddress '16 lazyS
      // 18: debug.print("RaffleParticipant ApproveCandidate")
      s3 POP                	//  lazyS storage.raffleAddress '16
      x{526166666c655061727469636970616e7420417070726f766543616e646964617465} PUSHSLICE	//  lazyS storage.raffleAddress '16 '36
      s0 DUMP DROP          	//  lazyS storage.raffleAddress '16
      // 20: storage.userAddress = inMessageBody.userAddress
      s0 s2 XCHG            	//  '16 storage.raffleAddress lazyS
      LDMSGADDR             	//  '16 storage.raffleAddress '37 lazyS
      DROP                  	//  '16 storage.raffleAddress storage.userAddress
      // 51: contract.setData(self.toCell())
      SWAP
      NEWC                  	//  '16 storage.userAddress storage.raffleAddress b
      STSLICE               	//  '16 storage.userAddress b
      s1 s2 XCHG            	//  storage.userAddress '16 b
      STSLICE               	//  storage.userAddress b
      OVER                  	//  storage.userAddress b storage.userAddress
      ISNULL                	//  storage.userAddress b '40
      IF:<{                 	//  storage.userAddress b
        NIP                 	//  b
        b{0} STSLICECONST   	//  b
      }>ELSE<{              	//  storage.userAddress b
        b{1} STSLICECONST   	//  storage.userAddress b
        STSLICE             	//  b
      }>
      ENDC                  	//  '45
      c4 POP                	// 
    }>                      	//  in.body storage.raffleAddress '16 lazyS
    3 BLKDROP               	//  in.body
    // 26: assert (inMessage.body.isEmpty()) throw 0xFFFF
    16 PUSHPOW2DEC          	//  in.body '46=65535
    SWAP                    	//  '46=65535 in.body
    SEMPTY                  	//  '46=65535 '47
    THROWANYIFNOT           	// 
  }>
  // contracts/raffle-participant.tolk:31:5
  userAddress() PROC:<{       	// 
    // 47: return RaffleParticipantStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '4
    // 32: val storage = lazy RaffleParticipantStorage.load()
    CTOS                    	//  lazyS
    // 33: return storage.userAddress
    LDMSGADDR               	//  '8 lazyS
    NIP                     	//  lazyS
    64 LDU
    NIP                     	//  lazyS
    1 LDU                   	//  '12 lazyS
    SWAP                    	//  lazyS '12
    IF:<{                   	//  lazyS
      LDMSGADDR             	//  '13 lazyS
      DROP                  	//  '10
    }>ELSE<{                	//  lazyS
      DROP                  	// 
      PUSHNULL              	//  '10
    }>                      	//  storage.userAddress
  }>
}END>c
