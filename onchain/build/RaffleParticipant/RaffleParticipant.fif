"Asm.fif" include
// automatically generated from raffle-participant.tolk, storage.tolk, messages.tolk, constants.tolk, errors.tolk, utils.tolk
PROGRAM{
  DECLPROC RaffleStorage.load()
  DECLPROC RaffleStorage.save()
  DECLPROC RaffleCandidateStorage.load()
  DECLPROC RaffleCandidateStorage.save()
  DECLPROC calculateRaffleCandidateAddress()
  DECLPROC calculateRaffleParticipantAddress()
  0 DECLMETHOD onInternalMessage()
  101278 DECLMETHOD raffleParticipantData()
  // 4 functions inlined in-place:
  // - SnakeString.unpackFromSlice (0 calls)
  // - SnakeString.packToBuilder (0 calls)
  // - RaffleParticipantStorage.load (2 calls)
  // - RaffleParticipantStorage.save (2 calls)
  // contracts/storage.tolk:25  (note: function never called!)
  RaffleStorage.load() PROC:<{	// 
    // 26: return RaffleStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '0
    CTOS                    	//  s
    LDMSGADDR               	//  '4 s
    32 LDU                  	//  '4 '6 s
    32 LDU                  	//  '4 '6 '8 s
    256 LDSLICE             	//  '4 '6 '8 '10 s
    LDREF                   	//  '4 '6 '8 '10 '11 s
    LDREF                   	//  '4 '6 '8 '10 '11 '12 s
    64 LDU                  	//  '4 '6 '8 '10 '11 '12 '14 s
    64 LDI                  	//  '4 '6 '8 '10 '11 '12 '14 '16 s
    64 LDU                  	//  '4 '6 '8 '10 '11 '12 '14 '16 '18 s
    64 LDU                  	//  '4 '6 '8 '10 '11 '12 '14 '16 '18 '20 s
    8 LDU                   	//  '4 '6 '8 '10 '11 '12 '14 '16 '18 '20 '22 s
    LDOPTREF                	//  '4 '6 '8 '10 '11 '12 '14 '16 '18 '20 '22 '23 s
    ENDS                    	//  '4 '6 '8 '10 '11 '12 '14 '16 '18 '20 '22 '23
  }>
  // contracts/storage.tolk:29  (note: function never called!)
  RaffleStorage.save() PROC:<{	//  self.ownerAddress self.minCandidateQuantity self.participantDuration self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantsQuantity self.winnersQuantity self.winners
    // 30: contract.setData(self.toCell())
    s0 s11 XCHG
    NEWC                    	//  self.winners self.minCandidateQuantity self.participantDuration self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantsQuantity self.winnersQuantity self.ownerAddress b
    STSLICE                 	//  self.winners self.minCandidateQuantity self.participantDuration self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantsQuantity self.winnersQuantity b
    s1 s10 XCHG             	//  self.winners self.winnersQuantity self.participantDuration self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantsQuantity self.minCandidateQuantity b
    32 STU                  	//  self.winners self.winnersQuantity self.participantDuration self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantsQuantity b
    s1 s8 XCHG              	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantDuration b
    32 STU                  	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b
    s6 PUSH                 	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b self.conditions
    SBITREFS                	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b '16 '17
    9 THROWIF               	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b '16
    8 PUSHPOW2              	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b '16 '21=256
    EQUAL                   	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b '20
    9 THROWIFNOT            	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b
    s1 s6 XCHG              	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.conditions b
    STSLICE                 	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime b
    s1 s4 XCHG              	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.minCandidateReachedUnixTime self.participantCode self.minCandidateReachedLt self.candidateCode b
    STREF                   	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.minCandidateReachedUnixTime self.participantCode self.minCandidateReachedLt b
    s1 s2 XCHG              	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.minCandidateReachedUnixTime self.minCandidateReachedLt self.participantCode b
    STREF                   	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.minCandidateReachedUnixTime self.minCandidateReachedLt b
    64 STU                  	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.minCandidateReachedUnixTime b
    64 STI                  	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity b
    64 STU                  	//  self.winners self.winnersQuantity self.participantsQuantity b
    64 STU                  	//  self.winners self.winnersQuantity b
    8 STU                   	//  self.winners b
    STOPTREF                	//  b
    ENDC                    	//  '29
    c4 POP                  	// 
  }>
  // contracts/storage.tolk:44  (note: function never called!)
  RaffleCandidateStorage.load() PROC:<{	// 
    // 45: return RaffleCandidateStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '0
    CTOS                    	//  s
    LDMSGADDR               	//  '4 s
    LDMSGADDR               	//  '4 '5 s
    256 LDSLICE             	//  '4 '5 '7 s
    1 LDI                   	//  '4 '5 '7 '9 s
    1 LDU                   	//  '4 '5 '7 '9 '12 s
    SWAP                    	//  '4 '5 '7 '9 s '12
    IF:<{                   	//  '4 '5 '7 '9 s
      64 LDU                	//  '4 '5 '7 '9 '10 s
    }>ELSE<{                	//  '4 '5 '7 '9 s
      PUSHNULL              	//  '4 '5 '7 '9 s '10
      SWAP                  	//  '4 '5 '7 '9 '10 s
    }>
    1 LDU                   	//  '4 '5 '7 '9 '10 '18 s
    SWAP                    	//  '4 '5 '7 '9 '10 s '18
    IF:<{                   	//  '4 '5 '7 '9 '10 s
      64 LDU                	//  '4 '5 '7 '9 '10 '16 s
    }>ELSE<{                	//  '4 '5 '7 '9 '10 s
      PUSHNULL              	//  '4 '5 '7 '9 '10 s '16
      SWAP                  	//  '4 '5 '7 '9 '10 '16 s
    }>
    ENDS                    	//  '4 '5 '7 '9 '10 '16
  }>
  // contracts/storage.tolk:48  (note: function never called!)
  RaffleCandidateStorage.save() PROC:<{	//  self.raffleAddress self.userAddress self.conditions self.isMatched self.telegramID self.participantIndex
    // 49: contract.setData(self.toCell())
    s0 s5 XCHG
    NEWC                    	//  self.participantIndex self.userAddress self.conditions self.isMatched self.telegramID self.raffleAddress b
    STSLICE                 	//  self.participantIndex self.userAddress self.conditions self.isMatched self.telegramID b
    s1 s4 XCHG              	//  self.participantIndex self.telegramID self.conditions self.isMatched self.userAddress b
    STSLICE                 	//  self.participantIndex self.telegramID self.conditions self.isMatched b
    s2 PUSH                 	//  self.participantIndex self.telegramID self.conditions self.isMatched b self.conditions
    SBITREFS                	//  self.participantIndex self.telegramID self.conditions self.isMatched b '8 '9
    9 THROWIF               	//  self.participantIndex self.telegramID self.conditions self.isMatched b '8
    8 PUSHPOW2              	//  self.participantIndex self.telegramID self.conditions self.isMatched b '8 '13=256
    EQUAL                   	//  self.participantIndex self.telegramID self.conditions self.isMatched b '12
    9 THROWIFNOT            	//  self.participantIndex self.telegramID self.conditions self.isMatched b
    s1 s2 XCHG              	//  self.participantIndex self.telegramID self.isMatched self.conditions b
    STSLICE                 	//  self.participantIndex self.telegramID self.isMatched b
    1 STI                   	//  self.participantIndex self.telegramID b
    OVER                    	//  self.participantIndex self.telegramID b self.telegramID
    ISNULL                  	//  self.participantIndex self.telegramID b '16
    IF:<{                   	//  self.participantIndex self.telegramID b
      NIP                   	//  self.participantIndex b
      b{0} STSLICECONST     	//  self.participantIndex b
    }>ELSE<{                	//  self.participantIndex self.telegramID b
      b{1} STSLICECONST     	//  self.participantIndex self.telegramID b
      64 STU                	//  self.participantIndex b
    }>
    OVER                    	//  self.participantIndex b self.participantIndex
    ISNULL                  	//  self.participantIndex b '22
    IF:<{                   	//  self.participantIndex b
      NIP                   	//  b
      b{0} STSLICECONST     	//  b
    }>ELSE<{                	//  self.participantIndex b
      b{1} STSLICECONST     	//  self.participantIndex b
      64 STU                	//  b
    }>
    ENDC                    	//  '28
    c4 POP                  	// 
  }>
  // contracts/storage.tolk:69  (note: function never called!)
  calculateRaffleCandidateAddress() PROC:<{	//  raffleAddress userAddress code
    // 70: val data: RaffleCandidateStorage = { raffleAddress, userAddress, conditions: createBits256None(), isMatched: false, telegramID: null, participantIndex: null }
    x{0000000000000000000000000000000000000000000000000000000000000000} PUSHSLICE	//  raffleAddress userAddress code '9
    PUSHNULL                	//  raffleAddress userAddress code '9 '11
    PUSHNULL                	//  data.raffleAddress data.userAddress code data.conditions data.telegramID data.participantIndex
    // 73: workchain: MY_WORKCHAIN
    0 PUSHINT               	//  data.raffleAddress data.userAddress code data.conditions data.telegramID data.participantIndex '13=0
    // 76: data: data.toCell()
    s0 s6 XCHG
    NEWC                    	//  '13=0 data.userAddress code data.conditions data.telegramID data.participantIndex data.raffleAddress b
    STSLICE                 	//  '13=0 data.userAddress code data.conditions data.telegramID data.participantIndex b
    s1 s5 XCHG              	//  '13=0 data.participantIndex code data.conditions data.telegramID data.userAddress b
    STSLICE                 	//  '13=0 data.participantIndex code data.conditions data.telegramID b
    s2 PUSH                 	//  '13=0 data.participantIndex code data.conditions data.telegramID b data.conditions
    SBITREFS                	//  '13=0 data.participantIndex code data.conditions data.telegramID b '16 '17
    9 THROWIF               	//  '13=0 data.participantIndex code data.conditions data.telegramID b '16
    8 PUSHPOW2              	//  '13=0 data.participantIndex code data.conditions data.telegramID b '16 '21=256
    EQUAL                   	//  '13=0 data.participantIndex code data.conditions data.telegramID b '20
    9 THROWIFNOT            	//  '13=0 data.participantIndex code data.conditions data.telegramID b
    s1 s2 XCHG              	//  '13=0 data.participantIndex code data.telegramID data.conditions b
    STSLICE                 	//  '13=0 data.participantIndex code data.telegramID b
    b{0} STSLICECONST       	//  '13=0 data.participantIndex code data.telegramID b
    OVER                    	//  '13=0 data.participantIndex code data.telegramID b data.telegramID
    ISNULL                  	//  '13=0 data.participantIndex code data.telegramID b '24
    IF:<{                   	//  '13=0 data.participantIndex code data.telegramID b
      NIP                   	//  '13=0 data.participantIndex code b
      b{0} STSLICECONST     	//  '13=0 data.participantIndex code b
    }>ELSE<{                	//  '13=0 data.participantIndex code data.telegramID b
      b{1} STSLICECONST     	//  '13=0 data.participantIndex code data.telegramID b
      64 STU                	//  '13=0 data.participantIndex code b
    }>
    s2 PUSH                 	//  '13=0 data.participantIndex code b data.participantIndex
    ISNULL                  	//  '13=0 data.participantIndex code b '30
    IF:<{                   	//  '13=0 data.participantIndex code b
      1 2 BLKDROP2          	//  '13=0 code b
      b{0} STSLICECONST     	//  '13=0 code b
    }>ELSE<{                	//  '13=0 data.participantIndex code b
      b{1} STSLICECONST     	//  '13=0 data.participantIndex code b
      s1 s2 XCHG            	//  '13=0 code data.participantIndex b
      64 STU                	//  '13=0 code b
    }>
    ENDC                    	//  '13=0 code '36
    // 74: stateInit:
    129 PUSHINT             	//  '13=0 code '36 '37=129
    PUSHNULL                	//  '13=0 code '36 '37=129 '38
    PUSHNULL                	//  '13=0 code '36 '37=129 '38 '39
    s5 PUSH                 	//  '13=0 code '36 '37=129 '38 '39 '40=0
  }>
  // contracts/storage.tolk:81  (note: function never called!)
  calculateRaffleParticipantAddress() PROC:<{	//  raffleAddress participantIndex code
    // 82: val data: RaffleParticipantStorage = { raffleAddress, participantIndex, userAddress: null, winnerIndex: null }
    PUSHNULL                	//  raffleAddress participantIndex code '7
    PUSHNULL                	//  data.raffleAddress data.participantIndex code data.userAddress data.winnerIndex
    // 85: workchain: MY_WORKCHAIN
    0 PUSHINT               	//  data.raffleAddress data.participantIndex code data.userAddress data.winnerIndex '9=0
    // 88: data: data.toCell()
    s0 s5 XCHG
    NEWC                    	//  '9=0 data.participantIndex code data.userAddress data.winnerIndex data.raffleAddress b
    STSLICE                 	//  '9=0 data.participantIndex code data.userAddress data.winnerIndex b
    s1 s4 XCHG              	//  '9=0 data.winnerIndex code data.userAddress data.participantIndex b
    64 STU                  	//  '9=0 data.winnerIndex code data.userAddress b
    OVER                    	//  '9=0 data.winnerIndex code data.userAddress b data.userAddress
    ISNULL                  	//  '9=0 data.winnerIndex code data.userAddress b '13
    IF:<{                   	//  '9=0 data.winnerIndex code data.userAddress b
      NIP                   	//  '9=0 data.winnerIndex code b
      b{0} STSLICECONST     	//  '9=0 data.winnerIndex code b
    }>ELSE<{                	//  '9=0 data.winnerIndex code data.userAddress b
      b{1} STSLICECONST     	//  '9=0 data.winnerIndex code data.userAddress b
      STSLICE               	//  '9=0 data.winnerIndex code b
    }>
    s2 PUSH                 	//  '9=0 data.winnerIndex code b data.winnerIndex
    ISNULL                  	//  '9=0 data.winnerIndex code b '18
    IF:<{                   	//  '9=0 data.winnerIndex code b
      1 2 BLKDROP2          	//  '9=0 code b
      b{0} STSLICECONST     	//  '9=0 code b
    }>ELSE<{                	//  '9=0 data.winnerIndex code b
      b{1} STSLICECONST     	//  '9=0 data.winnerIndex code b
      s1 s2 XCHG            	//  '9=0 code data.winnerIndex b
      8 STU                 	//  '9=0 code b
    }>
    ENDC                    	//  '9=0 code '24
    // 86: stateInit:
    129 PUSHINT             	//  '9=0 code '24 '25=129
    PUSHNULL                	//  '9=0 code '24 '25=129 '26
    PUSHNULL                	//  '9=0 code '24 '25=129 '26 '27
    s5 PUSH                 	//  '9=0 code '24 '25=129 '26 '27 '28=0
  }>
  // contracts/raffle-participant.tolk:10
  onInternalMessage() PROC:<{ 	//  in.body
    // 10: fun onInternalMessage(inMessage: InMessage)
    INMSG_BOUNCED           	//  in.body '1
    0 THROWIF               	//  in.body
    // 62: return RaffleParticipantStorage.fromCell(contract.getData())
    c4 PUSH                 	//  in.body '10
    // 12: var storage = lazy RaffleParticipantStorage.load()
    CTOS                    	//  in.body lazyS
    // 13: assert (storage.raffleAddress == inMessage.senderAddress) throw ERROR_NOT_AUTHORIZED
    LDMSGADDR               	//  in.body storage.raffleAddress lazyS
    64 LDSLICE              	//  in.body storage.raffleAddress '16 lazyS
    1 LDU                   	//  in.body storage.raffleAddress '16 '19 lazyS
    SWAP                    	//  in.body storage.raffleAddress '16 lazyS '19
    IF:<{                   	//  in.body storage.raffleAddress '16 lazyS
      LDMSGADDR             	//  in.body storage.raffleAddress '16 '17 lazyS
    }>ELSE<{                	//  in.body storage.raffleAddress '16 lazyS
      PUSHNULL              	//  in.body storage.raffleAddress '16 lazyS '17
      SWAP                  	//  in.body storage.raffleAddress '16 '17 lazyS
    }>                      	//  in.body storage.raffleAddress '16 storage.userAddress lazyS
    1 LDU                   	//  in.body storage.raffleAddress '16 storage.userAddress '24 lazyS
    SWAP                    	//  in.body storage.raffleAddress '16 storage.userAddress lazyS '24
    IF:<{                   	//  in.body storage.raffleAddress '16 storage.userAddress lazyS
      8 PLDU                	//  in.body storage.raffleAddress '16 storage.userAddress '22
    }>ELSE<{                	//  in.body storage.raffleAddress '16 storage.userAddress lazyS
      DROP                  	//  in.body storage.raffleAddress '16 storage.userAddress
      PUSHNULL              	//  in.body storage.raffleAddress '16 storage.userAddress '22
    }>                      	//  in.body storage.raffleAddress '16 storage.userAddress storage.winnerIndex
    4919 PUSHINT            	//  in.body storage.raffleAddress '16 storage.userAddress storage.winnerIndex '28=4919
    INMSG_SRC               	//  in.body storage.raffleAddress '16 storage.userAddress storage.winnerIndex '28=4919 '29
    s5 PUSH                 	//  in.body storage.raffleAddress '16 storage.userAddress storage.winnerIndex '28=4919 '29 storage.raffleAddress
    SDEQ                    	//  in.body storage.raffleAddress '16 storage.userAddress storage.winnerIndex '28=4919 '31
    THROWANYIFNOT           	//  in.body storage.raffleAddress '16 storage.userAddress storage.winnerIndex
    // 15: val inMessageBody = lazy AllowedMessageParticipant.fromSlice(inMessage.body)
    s4 PUSH                 	//  in.body storage.raffleAddress '16 storage.userAddress storage.winnerIndex lazyS
    // 17: match (inMessageBody)
    x{13370030} SDBEGINSQ   	//  in.body storage.raffleAddress '16 storage.userAddress storage.winnerIndex lazyS '41
    IFJMP:<{                	//  in.body storage.raffleAddress '16 storage.userAddress storage.winnerIndex lazyS
      // 19: storage.userAddress = inMessageBody.userAddress
      s2 POP                	//  in.body storage.raffleAddress '16 lazyS storage.winnerIndex
      s4 POP                	//  storage.winnerIndex storage.raffleAddress '16 lazyS
      LDMSGADDR             	//  storage.winnerIndex storage.raffleAddress '16 '44 lazyS
      NIP                   	//  storage.winnerIndex storage.raffleAddress '16 lazyS
      LDMSGADDR             	//  storage.winnerIndex storage.raffleAddress '16 '45 lazyS
      DROP                  	//  storage.winnerIndex storage.raffleAddress '16 storage.userAddress
      // 66: contract.setData(self.toCell())
      s0 s2 XCHG
      NEWC                  	//  storage.winnerIndex storage.userAddress '16 storage.raffleAddress b
      STSLICE               	//  storage.winnerIndex storage.userAddress '16 b
      STSLICE               	//  storage.winnerIndex storage.userAddress b
      OVER                  	//  storage.winnerIndex storage.userAddress b storage.userAddress
      ISNULL                	//  storage.winnerIndex storage.userAddress b '48
      IF:<{                 	//  storage.winnerIndex storage.userAddress b
        NIP                 	//  storage.winnerIndex b
        b{0} STSLICECONST   	//  storage.winnerIndex b
      }>ELSE<{              	//  storage.winnerIndex storage.userAddress b
        b{1} STSLICECONST   	//  storage.winnerIndex storage.userAddress b
        STSLICE             	//  storage.winnerIndex b
      }>
      OVER                  	//  storage.winnerIndex b storage.winnerIndex
      ISNULL                	//  storage.winnerIndex b '53
      IF:<{                 	//  storage.winnerIndex b
        NIP                 	//  b
        b{0} STSLICECONST   	//  b
      }>ELSE<{              	//  storage.winnerIndex b
        b{1} STSLICECONST   	//  storage.winnerIndex b
        8 STU               	//  b
      }>
      ENDC                  	//  '59
      c4 POP                	// 
    }>                      	//  in.body storage.raffleAddress '16 storage.userAddress storage.winnerIndex lazyS
    // 17: match (inMessageBody)
    NIP                     	//  in.body storage.raffleAddress '16 storage.userAddress lazyS
    x{13370031} SDBEGINSQ   	//  in.body storage.raffleAddress '16 storage.userAddress lazyS '41
    IFJMP:<{                	//  in.body storage.raffleAddress '16 storage.userAddress lazyS
      // 24: assert (inMessage.valueCoins > MIN_TONS_FOR_RAFFLE_PARTICIPANT_STORAGE + inMessageBody.forwardAmount) throw ERROR_NOT_ENOUGH_TONS
      s4 POP                	//  lazyS storage.raffleAddress '16 storage.userAddress
      s0 s3 XCHG            	//  storage.userAddress storage.raffleAddress '16 lazyS
      8 LDU                 	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 lazyS
      LDGRAMS               	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 s
      // 4: assert (s.remainingRefsCount() <= 1) throw 5
      DUP                   	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 s s
      SREFS                 	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 s '69
      2 LESSINT             	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 s '71
      5 THROWIFNOT          	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3
      // 24: assert (inMessage.valueCoins > MIN_TONS_FOR_RAFFLE_PARTICIPANT_STORAGE + inMessageBody.forwardAmount) throw ERROR_NOT_ENOUGH_TONS
      4097 PUSHINT          	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3 '75=4097
      INMSG_VALUE           	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3 '75=4097 '76
      5000000 PUSHINT       	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3 '75=4097 '76 '78=5000000
      s4 PUSH               	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3 '75=4097 '76 '78=5000000 inMessageBody.USlot2
      ADD                   	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3 '75=4097 '76 '79
      GREATER               	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3 '75=4097 '80
      THROWANYIFNOT         	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3
      // 25: assert (storage.userAddress != null) throw ERROR_INVALID_PARTICIPANT
      32769 PUSHINT         	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3 '82=32769
      s6 PUSH               	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3 '82=32769 storage.userAddress
      ISNULL                	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3 '82=32769 '83
      NOT                   	//  storage.userAddress storage.raffleAddress '16 inMessageBody.USlot1 inMessageBody.USlot2 inMessageBody.USlot3 '82=32769 '83
      THROWANYIFNOT         	//  storage.userAddress storage.raffleAddress '16 storage.winnerIndex inMessageBody.USlot2 inMessageBody.USlot3
      // 66: contract.setData(self.toCell())
      s4 PUSH
      NEWC                  	//  storage.userAddress storage.raffleAddress '16 storage.winnerIndex inMessageBody.USlot2 inMessageBody.USlot3 storage.raffleAddress b
      STSLICE               	//  storage.userAddress storage.raffleAddress '16 storage.winnerIndex inMessageBody.USlot2 inMessageBody.USlot3 b
      s1 s4 XCHG            	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 '16 b
      STSLICE               	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b
      s5 PUSH               	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b storage.userAddress
      ISNULL                	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b '87
      IF:<{                 	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b
        b{0} STSLICECONST   	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b
      }>ELSE<{              	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b
        b{1} STSLICECONST   	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b
        s5 PUSH             	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b storage.userAddress
        STSLICER            	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b
      }>
      s2 PUSH               	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b storage.winnerIndex
      ISNULL                	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b '92
      IF:<{                 	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b
        1 2 BLKDROP2        	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 inMessageBody.USlot2 b
        b{0} STSLICECONST   	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 inMessageBody.USlot2 b
      }>ELSE<{              	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b
        b{1} STSLICECONST   	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 storage.winnerIndex inMessageBody.USlot2 b
        s1 s2 XCHG          	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 inMessageBody.USlot2 storage.winnerIndex b
        8 STU               	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 inMessageBody.USlot2 b
      }>
      ENDC                  	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 inMessageBody.USlot2 '98
      c4 POP                	//  storage.userAddress storage.raffleAddress inMessageBody.USlot3 inMessageBody.USlot2
      // 30: val userNotificationMessage = createMessage(
      SWAP
      NEWC                  	//  storage.userAddress storage.raffleAddress inMessageBody.USlot2 inMessageBody.USlot3 refb
      STSLICE               	//  storage.userAddress storage.raffleAddress inMessageBody.USlot2 refb
      ENDC                  	//  storage.userAddress storage.raffleAddress inMessageBody.USlot2 '123
      NEWC                  	//  storage.userAddress storage.raffleAddress inMessageBody.USlot2 '123 b
      b{011000} STSLICECONST	//  storage.userAddress storage.raffleAddress inMessageBody.USlot2 '123 b
      s1 s4 XCHG            	//  '123 storage.raffleAddress inMessageBody.USlot2 storage.userAddress b
      STSLICE               	//  '123 storage.raffleAddress inMessageBody.USlot2 b
      SWAP                  	//  '123 storage.raffleAddress b inMessageBody.USlot2
      STGRAMS               	//  '123 storage.raffleAddress b
      1 PUSHINT
      107 STUR              	//  '123 storage.raffleAddress b
      s1 s2 XCHG            	//  storage.raffleAddress '123 b
      STREF                 	//  storage.raffleAddress b
      ENDC                  	//  storage.raffleAddress userNotificationMessage
      // 37: reserveToncoinsOnBalance(MIN_TONS_FOR_RAFFLE_PARTICIPANT_STORAGE, RESERVE_MODE_EXACT_AMOUNT)
      5000000 PUSHINT       	//  storage.raffleAddress userNotificationMessage '161=5000000
      0 PUSHINT             	//  storage.raffleAddress userNotificationMessage '161=5000000 '162=0
      RAWRESERVE            	//  storage.raffleAddress userNotificationMessage
      // 38: userNotificationMessage.send(SEND_MODE_PAY_FEES_SEPARATELY)
      1 PUSHINT             	//  storage.raffleAddress userNotificationMessage '163=1
      SENDRAWMSG            	//  storage.raffleAddress
      // 44: body: createEmptyCell()
      <b b> PUSHREF         	//  storage.raffleAddress '176
      // 40: val excessMessage = createMessage(
      NEWC                  	//  storage.raffleAddress '176 b
      b{011000} STSLICECONST	//  storage.raffleAddress '176 b
      s1 s2 XCHG            	//  '176 storage.raffleAddress b
      STSLICE               	//  '176 b
      1 PUSHINT
      111 STUR              	//  '176 b
      STREF                 	//  b
      ENDC                  	//  excessMessage
      // 47: reserveToncoinsOnBalance(MIN_TONS_FOR_RAFFLE_PARTICIPANT_STORAGE, RESERVE_MODE_EXACT_AMOUNT)
      5000000 PUSHINT       	//  excessMessage '226=5000000
      0 PUSHINT             	//  excessMessage '226=5000000 '227=0
      RAWRESERVE            	//  excessMessage
      // 48: excessMessage.send(SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_IGNORE_ERRORS)
      130 PUSHINT           	//  excessMessage '230
      SENDRAWMSG            	// 
    }>                      	//  in.body storage.raffleAddress '16 storage.userAddress lazyS
    4 BLKDROP               	//  in.body
    // 52: assert (inMessage.body.isEmpty()) throw ERROR_WRONG_OPCODE
    16 PUSHPOW2DEC          	//  in.body '231=65535
    SWAP                    	//  '231=65535 in.body
    SEMPTY                  	//  '231=65535 '232
    THROWANYIFNOT           	// 
  }>
  // contracts/raffle-participant.tolk:57:5
  raffleParticipantData() PROC:<{	// 
    // 62: return RaffleParticipantStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '5
    // 58: val storage = lazy RaffleParticipantStorage.load()
    CTOS                    	//  lazyS
    // 59: return (storage.participantIndex, storage.userAddress)
    LDMSGADDR               	//  '9 lazyS
    NIP                     	//  lazyS
    64 LDU                  	//  storage.participantIndex lazyS
    1 LDU                   	//  storage.participantIndex '14 lazyS
    SWAP                    	//  storage.participantIndex lazyS '14
    IF:<{                   	//  storage.participantIndex lazyS
      LDMSGADDR             	//  storage.participantIndex '15 lazyS
      DROP                  	//  storage.participantIndex '12
    }>ELSE<{                	//  storage.participantIndex lazyS
      DROP                  	//  storage.participantIndex
      PUSHNULL              	//  storage.participantIndex '12
    }>                      	//  storage.participantIndex storage.userAddress
  }>
}END>c
