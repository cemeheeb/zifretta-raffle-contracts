"Asm.fif" include
// automatically generated from raffle-candidate.tolk, storage.tolk, errors.tolk, messages.tolk, constants.tolk, utils.tolk
PROGRAM{
  DECLPROC RaffleStorage.load()
  DECLPROC RaffleStorage.save()
  DECLPROC RaffleParticipantStorage.load()
  DECLPROC RaffleParticipantStorage.save()
  DECLPROC calculateRaffleCandidateAddress()
  DECLPROC calculateRaffleParticipantAddress()
  0 DECLMETHOD onInternalMessage()
  118964 DECLMETHOD raffleCandidateData()
  // 5 functions inlined in-place:
  // - SnakeString.unpackFromSlice (0 calls)
  // - SnakeString.packToBuilder (0 calls)
  // - RaffleCandidateStorage.load (3 calls)
  // - RaffleCandidateStorage.save (4 calls)
  // - onBouncedMessage (0 calls)
  // contracts/storage.tolk:25  (note: function never called!)
  RaffleStorage.load() PROC:<{	// 
    // 26: return RaffleStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '0
    CTOS                    	//  s
    LDMSGADDR               	//  '4 s
    32 LDU                  	//  '4 '6 s
    32 LDU                  	//  '4 '6 '8 s
    256 LDSLICE             	//  '4 '6 '8 '10 s
    LDREF                   	//  '4 '6 '8 '10 '11 s
    LDREF                   	//  '4 '6 '8 '10 '11 '12 s
    64 LDU                  	//  '4 '6 '8 '10 '11 '12 '14 s
    64 LDI                  	//  '4 '6 '8 '10 '11 '12 '14 '16 s
    64 LDU                  	//  '4 '6 '8 '10 '11 '12 '14 '16 '18 s
    64 LDU                  	//  '4 '6 '8 '10 '11 '12 '14 '16 '18 '20 s
    8 LDU                   	//  '4 '6 '8 '10 '11 '12 '14 '16 '18 '20 '22 s
    LDOPTREF                	//  '4 '6 '8 '10 '11 '12 '14 '16 '18 '20 '22 '23 s
    ENDS                    	//  '4 '6 '8 '10 '11 '12 '14 '16 '18 '20 '22 '23
  }>
  // contracts/storage.tolk:29  (note: function never called!)
  RaffleStorage.save() PROC:<{	//  self.ownerAddress self.minCandidateQuantity self.participantDuration self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantsQuantity self.winnersQuantity self.winners
    // 30: contract.setData(self.toCell())
    s0 s11 XCHG
    NEWC                    	//  self.winners self.minCandidateQuantity self.participantDuration self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantsQuantity self.winnersQuantity self.ownerAddress b
    STSLICE                 	//  self.winners self.minCandidateQuantity self.participantDuration self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantsQuantity self.winnersQuantity b
    s1 s10 XCHG             	//  self.winners self.winnersQuantity self.participantDuration self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantsQuantity self.minCandidateQuantity b
    32 STU                  	//  self.winners self.winnersQuantity self.participantDuration self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantsQuantity b
    s1 s8 XCHG              	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity self.participantDuration b
    32 STU                  	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b
    s6 PUSH                 	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b self.conditions
    SBITREFS                	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b '16 '17
    9 THROWIF               	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b '16
    8 PUSHPOW2              	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b '16 '21=256
    EQUAL                   	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b '20
    9 THROWIFNOT            	//  self.winners self.winnersQuantity self.participantsQuantity self.conditions self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.candidatesQuantity b
    s1 s6 XCHG              	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime self.conditions b
    STSLICE                 	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.candidateCode self.participantCode self.minCandidateReachedLt self.minCandidateReachedUnixTime b
    s1 s4 XCHG              	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.minCandidateReachedUnixTime self.participantCode self.minCandidateReachedLt self.candidateCode b
    STREF                   	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.minCandidateReachedUnixTime self.participantCode self.minCandidateReachedLt b
    s1 s2 XCHG              	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.minCandidateReachedUnixTime self.minCandidateReachedLt self.participantCode b
    STREF                   	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.minCandidateReachedUnixTime self.minCandidateReachedLt b
    64 STU                  	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity self.minCandidateReachedUnixTime b
    64 STI                  	//  self.winners self.winnersQuantity self.participantsQuantity self.candidatesQuantity b
    64 STU                  	//  self.winners self.winnersQuantity self.participantsQuantity b
    64 STU                  	//  self.winners self.winnersQuantity b
    8 STU                   	//  self.winners b
    STOPTREF                	//  b
    ENDC                    	//  '29
    c4 POP                  	// 
  }>
  // contracts/storage.tolk:61  (note: function never called!)
  RaffleParticipantStorage.load() PROC:<{	// 
    // 62: return RaffleParticipantStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '0
    CTOS                    	//  s
    LDMSGADDR               	//  '4 s
    64 LDU                  	//  '4 '6 s
    1 LDU                   	//  '4 '6 '9 s
    SWAP                    	//  '4 '6 s '9
    IF:<{                   	//  '4 '6 s
      LDMSGADDR             	//  '4 '6 '7 s
    }>ELSE<{                	//  '4 '6 s
      PUSHNULL              	//  '4 '6 s '7
      SWAP                  	//  '4 '6 '7 s
    }>
    1 LDU                   	//  '4 '6 '7 '14 s
    SWAP                    	//  '4 '6 '7 s '14
    IF:<{                   	//  '4 '6 '7 s
      8 LDU                 	//  '4 '6 '7 '12 s
    }>ELSE<{                	//  '4 '6 '7 s
      PUSHNULL              	//  '4 '6 '7 s '12
      SWAP                  	//  '4 '6 '7 '12 s
    }>
    ENDS                    	//  '4 '6 '7 '12
  }>
  // contracts/storage.tolk:65  (note: function never called!)
  RaffleParticipantStorage.save() PROC:<{	//  self.raffleAddress self.participantIndex self.userAddress self.winnerIndex
    // 66: contract.setData(self.toCell())
    s0 s3 XCHG
    NEWC                    	//  self.winnerIndex self.participantIndex self.userAddress self.raffleAddress b
    STSLICE                 	//  self.winnerIndex self.participantIndex self.userAddress b
    s1 s2 XCHG              	//  self.winnerIndex self.userAddress self.participantIndex b
    64 STU                  	//  self.winnerIndex self.userAddress b
    OVER                    	//  self.winnerIndex self.userAddress b self.userAddress
    ISNULL                  	//  self.winnerIndex self.userAddress b '7
    IF:<{                   	//  self.winnerIndex self.userAddress b
      NIP                   	//  self.winnerIndex b
      b{0} STSLICECONST     	//  self.winnerIndex b
    }>ELSE<{                	//  self.winnerIndex self.userAddress b
      b{1} STSLICECONST     	//  self.winnerIndex self.userAddress b
      STSLICE               	//  self.winnerIndex b
    }>
    OVER                    	//  self.winnerIndex b self.winnerIndex
    ISNULL                  	//  self.winnerIndex b '12
    IF:<{                   	//  self.winnerIndex b
      NIP                   	//  b
      b{0} STSLICECONST     	//  b
    }>ELSE<{                	//  self.winnerIndex b
      b{1} STSLICECONST     	//  self.winnerIndex b
      8 STU                 	//  b
    }>
    ENDC                    	//  '18
    c4 POP                  	// 
  }>
  // contracts/storage.tolk:69  (note: function never called!)
  calculateRaffleCandidateAddress() PROC:<{	//  raffleAddress userAddress code
    // 70: val data: RaffleCandidateStorage = { raffleAddress, userAddress, conditions: createBits256None(), isMatched: false, telegramID: null, participantIndex: null }
    x{0000000000000000000000000000000000000000000000000000000000000000} PUSHSLICE	//  raffleAddress userAddress code '9
    PUSHNULL                	//  raffleAddress userAddress code '9 '11
    PUSHNULL                	//  data.raffleAddress data.userAddress code data.conditions data.telegramID data.participantIndex
    // 73: workchain: MY_WORKCHAIN
    0 PUSHINT               	//  data.raffleAddress data.userAddress code data.conditions data.telegramID data.participantIndex '13=0
    // 76: data: data.toCell()
    s0 s6 XCHG
    NEWC                    	//  '13=0 data.userAddress code data.conditions data.telegramID data.participantIndex data.raffleAddress b
    STSLICE                 	//  '13=0 data.userAddress code data.conditions data.telegramID data.participantIndex b
    s1 s5 XCHG              	//  '13=0 data.participantIndex code data.conditions data.telegramID data.userAddress b
    STSLICE                 	//  '13=0 data.participantIndex code data.conditions data.telegramID b
    s2 PUSH                 	//  '13=0 data.participantIndex code data.conditions data.telegramID b data.conditions
    SBITREFS                	//  '13=0 data.participantIndex code data.conditions data.telegramID b '16 '17
    9 THROWIF               	//  '13=0 data.participantIndex code data.conditions data.telegramID b '16
    8 PUSHPOW2              	//  '13=0 data.participantIndex code data.conditions data.telegramID b '16 '21=256
    EQUAL                   	//  '13=0 data.participantIndex code data.conditions data.telegramID b '20
    9 THROWIFNOT            	//  '13=0 data.participantIndex code data.conditions data.telegramID b
    s1 s2 XCHG              	//  '13=0 data.participantIndex code data.telegramID data.conditions b
    STSLICE                 	//  '13=0 data.participantIndex code data.telegramID b
    b{0} STSLICECONST       	//  '13=0 data.participantIndex code data.telegramID b
    OVER                    	//  '13=0 data.participantIndex code data.telegramID b data.telegramID
    ISNULL                  	//  '13=0 data.participantIndex code data.telegramID b '24
    IF:<{                   	//  '13=0 data.participantIndex code data.telegramID b
      NIP                   	//  '13=0 data.participantIndex code b
      b{0} STSLICECONST     	//  '13=0 data.participantIndex code b
    }>ELSE<{                	//  '13=0 data.participantIndex code data.telegramID b
      b{1} STSLICECONST     	//  '13=0 data.participantIndex code data.telegramID b
      64 STU                	//  '13=0 data.participantIndex code b
    }>
    s2 PUSH                 	//  '13=0 data.participantIndex code b data.participantIndex
    ISNULL                  	//  '13=0 data.participantIndex code b '30
    IF:<{                   	//  '13=0 data.participantIndex code b
      1 2 BLKDROP2          	//  '13=0 code b
      b{0} STSLICECONST     	//  '13=0 code b
    }>ELSE<{                	//  '13=0 data.participantIndex code b
      b{1} STSLICECONST     	//  '13=0 data.participantIndex code b
      s1 s2 XCHG            	//  '13=0 code data.participantIndex b
      64 STU                	//  '13=0 code b
    }>
    ENDC                    	//  '13=0 code '36
    // 74: stateInit:
    129 PUSHINT             	//  '13=0 code '36 '37=129
    PUSHNULL                	//  '13=0 code '36 '37=129 '38
    PUSHNULL                	//  '13=0 code '36 '37=129 '38 '39
    s5 PUSH                 	//  '13=0 code '36 '37=129 '38 '39 '40=0
  }>
  // contracts/storage.tolk:81  (note: function never called!)
  calculateRaffleParticipantAddress() PROC:<{	//  raffleAddress participantIndex code
    // 82: val data: RaffleParticipantStorage = { raffleAddress, participantIndex, userAddress: null, winnerIndex: null }
    PUSHNULL                	//  raffleAddress participantIndex code '7
    PUSHNULL                	//  data.raffleAddress data.participantIndex code data.userAddress data.winnerIndex
    // 85: workchain: MY_WORKCHAIN
    0 PUSHINT               	//  data.raffleAddress data.participantIndex code data.userAddress data.winnerIndex '9=0
    // 88: data: data.toCell()
    s0 s5 XCHG
    NEWC                    	//  '9=0 data.participantIndex code data.userAddress data.winnerIndex data.raffleAddress b
    STSLICE                 	//  '9=0 data.participantIndex code data.userAddress data.winnerIndex b
    s1 s4 XCHG              	//  '9=0 data.winnerIndex code data.userAddress data.participantIndex b
    64 STU                  	//  '9=0 data.winnerIndex code data.userAddress b
    OVER                    	//  '9=0 data.winnerIndex code data.userAddress b data.userAddress
    ISNULL                  	//  '9=0 data.winnerIndex code data.userAddress b '13
    IF:<{                   	//  '9=0 data.winnerIndex code data.userAddress b
      NIP                   	//  '9=0 data.winnerIndex code b
      b{0} STSLICECONST     	//  '9=0 data.winnerIndex code b
    }>ELSE<{                	//  '9=0 data.winnerIndex code data.userAddress b
      b{1} STSLICECONST     	//  '9=0 data.winnerIndex code data.userAddress b
      STSLICE               	//  '9=0 data.winnerIndex code b
    }>
    s2 PUSH                 	//  '9=0 data.winnerIndex code b data.winnerIndex
    ISNULL                  	//  '9=0 data.winnerIndex code b '18
    IF:<{                   	//  '9=0 data.winnerIndex code b
      1 2 BLKDROP2          	//  '9=0 code b
      b{0} STSLICECONST     	//  '9=0 code b
    }>ELSE<{                	//  '9=0 data.winnerIndex code b
      b{1} STSLICECONST     	//  '9=0 data.winnerIndex code b
      s1 s2 XCHG            	//  '9=0 code data.winnerIndex b
      8 STU                 	//  '9=0 code b
    }>
    ENDC                    	//  '9=0 code '24
    // 86: stateInit:
    129 PUSHINT             	//  '9=0 code '24 '25=129
    PUSHNULL                	//  '9=0 code '24 '25=129 '26
    PUSHNULL                	//  '9=0 code '24 '25=129 '26 '27
    s5 PUSH                 	//  '9=0 code '24 '25=129 '26 '27 '28=0
  }>
  // contracts/raffle-candidate.tolk:10
  onInternalMessage() PROC:<{ 	//  in.body
    // 10: fun onInternalMessage(inMessage: InMessage)
    INMSG_BOUNCED           	//  in.body '1
    IFJMP:<{                	//  in.body
      // 80: in.bouncedBody.skipBouncedPrefix()
      32 LDU
      NIP                   	//  s
      // 83: RaffleApprove.fromSlice(in.bouncedBody)
      x{13370012} SDBEGINSQ 	//  s '7
      63 THROWIFNOT         	//  s
      LDMSGADDR             	//  '11 s
      NIP                   	//  s
      LDMSGADDR             	//  '12 s
      NIP                   	//  s
      ENDS                  	// 
      // 45: return RaffleCandidateStorage.fromCell(contract.getData())
      c4 PUSH               	//  '20
      // 85: var storage = lazy RaffleCandidateStorage.load()
      CTOS                  	//  lazyS
      // 86: storage.isMatched = false
      LDMSGADDR             	//  '24 lazyS
      LDMSGADDR             	//  '24 '25 lazyS
      256 LDSLICE           	//  '24 '25 '27 lazyS
      1 LDI                 	//  '24 '25 '27 '29 lazyS
      NIP                   	//  '24 '25 '27 '30
      // 49: contract.setData(self.toCell())
      s0 s3 XCHG
      NEWC                  	//  '30 '25 '27 '24 b
      STSLICE               	//  '30 '25 '27 b
      s1 s2 XCHG            	//  '30 '27 '25 b
      STSLICE               	//  '30 '27 b
      STSLICE               	//  '30 b
      b{0} STSLICECONST     	//  '30 b
      STSLICE               	//  b
      ENDC                  	//  '34
      c4 POP                	// 
    }>                      	//  in.body
    // 45: return RaffleCandidateStorage.fromCell(contract.getData())
    c4 PUSH                 	//  in.body '42
    // 12: var storage = lazy RaffleCandidateStorage.load()
    CTOS                    	//  in.body lazyS
    // 13: assert (inMessage.senderAddress == storage.raffleAddress) throw ERROR_NOT_AUTHORIZED
    LDMSGADDR               	//  in.body storage.raffleAddress lazyS
    LDMSGADDR               	//  in.body storage.raffleAddress storage.userAddress lazyS
    256 LDSLICE             	//  in.body storage.raffleAddress storage.userAddress storage.conditions lazyS
    1 LDI                   	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched lazyS
    1 LDU                   	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched '54 lazyS
    SWAP                    	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched lazyS '54
    IF:<{                   	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched lazyS
      64 LDU                	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched '52 lazyS
    }>ELSE<{                	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched lazyS
      PUSHNULL              	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched lazyS '52
      SWAP                  	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched '52 lazyS
    }>                      	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID lazyS
    1 LDU                   	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID '60 lazyS
    SWAP                    	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID lazyS '60
    IF:<{                   	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID lazyS
      64 PLDU               	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID '58
    }>ELSE<{                	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID lazyS
      DROP                  	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID
      PUSHNULL              	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID '58
    }>                      	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex
    4919 PUSHINT            	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex '64=4919
    INMSG_SRC               	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex '64=4919 '65
    s7 PUSH                 	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex '64=4919 '65 storage.raffleAddress
    SDEQ                    	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex '64=4919 '67
    THROWANYIFNOT           	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex
    // 15: val inMessageBody = lazy AllowedMessageCandidate.fromSlice(inMessage.body)
    s6 PUSH                 	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex lazyS
    // 17: match (inMessageBody)
    x{13370020} SDBEGINSQ   	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex lazyS '77
    IFJMP:<{                	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex lazyS
      // 19: assert (inMessageBody.telegramID > 0) throw ERROR_INVALID_TELEGRAM_ID
      s7 POP                	//  lazyS storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex
      s0 s6 XCHG            	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID lazyS
      LDMSGADDR             	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID inMessageBody.USlot2 lazyS
      64 PLDU               	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID inMessageBody.USlot2 inMessageBody.USlot3
      36865 PUSHINT         	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID inMessageBody.USlot2 inMessageBody.USlot3 '83=36865
      OVER                  	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID inMessageBody.USlot2 inMessageBody.USlot3 '83=36865 inMessageBody.USlot3
      0 GTINT               	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID inMessageBody.USlot2 inMessageBody.USlot3 '83=36865 '85
      THROWANYIFNOT         	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID inMessageBody.USlot2 inMessageBody.USlot3
      // 20: assert (storage.telegramID == null) throw ERROR_ALREADY_REGISTERED
      28673 PUSHINT         	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID inMessageBody.USlot2 inMessageBody.USlot3 '87=28673
      s0 s3 XCHG            	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched '87=28673 inMessageBody.USlot2 inMessageBody.USlot3 storage.telegramID
      ISNULL                	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched '87=28673 inMessageBody.USlot2 inMessageBody.USlot3 '88
      s1 s3 XCHG            	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched inMessageBody.USlot3 inMessageBody.USlot2 '87=28673 '88
      THROWANYIFNOT         	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID inMessageBody.USlot2
      // 49: contract.setData(self.toCell())
      s0 s5 XCHG
      NEWC                  	//  storage.participantIndex inMessageBody.USlot2 storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.raffleAddress b
      STSLICE               	//  storage.participantIndex inMessageBody.USlot2 storage.userAddress storage.conditions storage.isMatched storage.telegramID b
      s1 s4 XCHG            	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID storage.conditions storage.isMatched storage.userAddress b
      STSLICE               	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID storage.conditions storage.isMatched b
      s2 PUSH               	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID storage.conditions storage.isMatched b storage.conditions
      SBITREFS              	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID storage.conditions storage.isMatched b '92 '93
      9 THROWIF             	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID storage.conditions storage.isMatched b '92
      8 PUSHPOW2            	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID storage.conditions storage.isMatched b '92 '97=256
      EQUAL                 	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID storage.conditions storage.isMatched b '96
      9 THROWIFNOT          	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID storage.conditions storage.isMatched b
      s1 s2 XCHG            	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID storage.isMatched storage.conditions b
      STSLICE               	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID storage.isMatched b
      1 STI                 	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID b
      OVER                  	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID b storage.telegramID
      ISNULL                	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID b '100
      IF:<{                 	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID b
        NIP                 	//  storage.participantIndex inMessageBody.USlot2 b
        b{0} STSLICECONST   	//  storage.participantIndex inMessageBody.USlot2 b
      }>ELSE<{              	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID b
        b{1} STSLICECONST   	//  storage.participantIndex inMessageBody.USlot2 storage.telegramID b
        64 STU              	//  storage.participantIndex inMessageBody.USlot2 b
      }>
      s2 PUSH               	//  storage.participantIndex inMessageBody.USlot2 b storage.participantIndex
      ISNULL                	//  storage.participantIndex inMessageBody.USlot2 b '106
      IF:<{                 	//  storage.participantIndex inMessageBody.USlot2 b
        1 2 BLKDROP2        	//  inMessageBody.USlot2 b
        b{0} STSLICECONST   	//  inMessageBody.USlot2 b
      }>ELSE<{              	//  storage.participantIndex inMessageBody.USlot2 b
        b{1} STSLICECONST   	//  storage.participantIndex inMessageBody.USlot2 b
        s1 s2 XCHG          	//  inMessageBody.USlot2 storage.participantIndex b
        64 STU              	//  inMessageBody.USlot2 b
      }>
      ENDC                  	//  inMessageBody.USlot2 '112
      c4 POP                	//  inMessageBody.USlot2
      // 28: value: RAFFLE_CANDIDATE_REGISTERATION_NOTIFICATION_OPERATION_FEE
      1744000 PUSHINT       	//  inMessageBody.USlot2 '117
      // 27: dest: inMessage.senderAddress
      INMSG_SRC             	//  inMessageBody.USlot2 '117 '120
      // 25: val raffleCandidateRegistrationNotification = createMessage(
      NEWC                  	//  inMessageBody.USlot2 '117 '120 b
      b{010000} STSLICECONST	//  inMessageBody.USlot2 '117 '120 b
      STSLICE               	//  inMessageBody.USlot2 '117 b
      SWAP                  	//  inMessageBody.USlot2 b '117
      STGRAMS               	//  inMessageBody.USlot2 b
      322371617 PUSHINT
      139 STUR              	//  inMessageBody.USlot2 b
      STSLICE               	//  b
      ENDC                  	//  raffleCandidateRegistrationNotification
      // 34: reserveToncoinsOnBalance(MIN_TONS_FOR_RAFFLE_CANDIDATE_STORAGE, RESERVE_MODE_EXACT_AMOUNT)
      5000000 PUSHINT       	//  raffleCandidateRegistrationNotification '180=5000000
      0 PUSHINT             	//  raffleCandidateRegistrationNotification '180=5000000 '181=0
      RAWRESERVE            	//  raffleCandidateRegistrationNotification
      // 35: raffleCandidateRegistrationNotification.send(SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_IGNORE_ERRORS)
      130 PUSHINT           	//  raffleCandidateRegistrationNotification '184
      SENDRAWMSG            	// 
    }>                      	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex lazyS
    // 17: match (inMessageBody)
    x{13370022} SDBEGINSQ   	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex lazyS '77
    IFJMP:<{                	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex lazyS
      // 38: assert (storage.isMatched == false) throw ERROR_ALREADY_MATCHED
      s4 POP                	//  in.body storage.raffleAddress storage.userAddress lazyS storage.isMatched storage.telegramID storage.participantIndex
      s6 POP                	//  storage.participantIndex storage.raffleAddress storage.userAddress lazyS storage.isMatched storage.telegramID
      24577 PUSHINT         	//  storage.participantIndex storage.raffleAddress storage.userAddress lazyS storage.isMatched storage.telegramID '187=24577
      s0 s2 XCHG            	//  storage.participantIndex storage.raffleAddress storage.userAddress lazyS '187=24577 storage.telegramID storage.isMatched
      NOT                   	//  storage.participantIndex storage.raffleAddress storage.userAddress lazyS '187=24577 storage.telegramID '188
      s1 s2 XCHG            	//  storage.participantIndex storage.raffleAddress storage.userAddress lazyS storage.telegramID '187=24577 '188
      THROWANYIFNOT         	//  storage.participantIndex storage.raffleAddress storage.userAddress lazyS storage.telegramID
      // 40: storage.conditions = inMessageBody.conditions
      SWAP                  	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID lazyS
      LDMSGADDR             	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 lazyS
      256 LDSLICE           	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 inMessageBody.USlot2 lazyS
      1 PLDI                	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3
      s0 s5 PUSH2
      // 49: contract.setData(self.toCell())
      NEWC                  	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3 storage.isMatched storage.raffleAddress b
      STSLICE               	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3 storage.isMatched b
      s6 PUSH               	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3 storage.isMatched b storage.userAddress
      STSLICER              	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3 storage.isMatched b
      s3 PUSH               	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3 storage.isMatched b storage.conditions
      SBITREFS              	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3 storage.isMatched b '197 '198
      9 THROWIF             	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3 storage.isMatched b '197
      8 PUSHPOW2            	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3 storage.isMatched b '197 '202=256
      EQUAL                 	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3 storage.isMatched b '201
      9 THROWIFNOT          	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.conditions inMessageBody.USlot3 storage.isMatched b
      s1 s3 XCHG            	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.isMatched inMessageBody.USlot3 storage.conditions b
      STSLICE               	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 storage.isMatched inMessageBody.USlot3 b
      s1 s2 XCHG            	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 inMessageBody.USlot3 storage.isMatched b
      1 STI                 	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 inMessageBody.USlot3 b
      s3 PUSH               	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 inMessageBody.USlot3 b storage.telegramID
      ISNULL                	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 inMessageBody.USlot3 b '205
      IF:<{                 	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 inMessageBody.USlot3 b
        s3 POP              	//  storage.participantIndex storage.raffleAddress storage.userAddress b inMessageBody.USlot1 inMessageBody.USlot3
        s0 s2 XCHG          	//  storage.participantIndex storage.raffleAddress storage.userAddress inMessageBody.USlot3 inMessageBody.USlot1 b
        b{0} STSLICECONST   	//  storage.participantIndex storage.raffleAddress storage.userAddress inMessageBody.USlot3 inMessageBody.USlot1 b
      }>ELSE<{              	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 inMessageBody.USlot3 b
        b{1} STSLICECONST   	//  storage.participantIndex storage.raffleAddress storage.userAddress storage.telegramID inMessageBody.USlot1 inMessageBody.USlot3 b
        s1 s3 XCHG          	//  storage.participantIndex storage.raffleAddress storage.userAddress inMessageBody.USlot3 inMessageBody.USlot1 storage.telegramID b
        64 STU              	//  storage.participantIndex storage.raffleAddress storage.userAddress inMessageBody.USlot3 inMessageBody.USlot1 b
      }>
      s5 PUSH               	//  storage.participantIndex storage.raffleAddress storage.userAddress inMessageBody.USlot3 inMessageBody.USlot1 b storage.participantIndex
      ISNULL                	//  storage.participantIndex storage.raffleAddress storage.userAddress inMessageBody.USlot3 inMessageBody.USlot1 b '211
      IF:<{                 	//  storage.participantIndex storage.raffleAddress storage.userAddress inMessageBody.USlot3 inMessageBody.USlot1 b
        s5 POP              	//  b storage.raffleAddress storage.userAddress inMessageBody.USlot3 inMessageBody.USlot1
        s0 s4 XCHG          	//  inMessageBody.USlot1 storage.raffleAddress storage.userAddress inMessageBody.USlot3 b
        b{0} STSLICECONST   	//  inMessageBody.USlot1 storage.raffleAddress storage.userAddress inMessageBody.USlot3 b
      }>ELSE<{              	//  storage.participantIndex storage.raffleAddress storage.userAddress inMessageBody.USlot3 inMessageBody.USlot1 b
        b{1} STSLICECONST   	//  storage.participantIndex storage.raffleAddress storage.userAddress inMessageBody.USlot3 inMessageBody.USlot1 b
        s1 s5 XCHG          	//  inMessageBody.USlot1 storage.raffleAddress storage.userAddress inMessageBody.USlot3 storage.participantIndex b
        64 STU              	//  inMessageBody.USlot1 storage.raffleAddress storage.userAddress inMessageBody.USlot3 b
      }>
      ENDC                  	//  inMessageBody.USlot1 storage.raffleAddress storage.userAddress inMessageBody.USlot3 '217
      c4 POP                	//  inMessageBody.USlot1 storage.raffleAddress storage.userAddress inMessageBody.USlot3
      // 44: if (inMessageBody.isMatched)
      IF:<{                 	//  inMessageBody.USlot1 storage.raffleAddress storage.userAddress
        // 45: val approveMessage = createMessage(
        NEWC                	//  inMessageBody.USlot1 storage.raffleAddress storage.userAddress refb
        x{13370012} STSLICECONST	//  inMessageBody.USlot1 storage.raffleAddress storage.userAddress refb
        s1 s3 XCHG          	//  storage.userAddress storage.raffleAddress inMessageBody.USlot1 refb
        STSLICE             	//  storage.userAddress storage.raffleAddress refb
        s1 s2 XCHG          	//  storage.raffleAddress storage.userAddress refb
        STSLICE             	//  storage.raffleAddress refb
        ENDC                	//  storage.raffleAddress '245
        NEWC                	//  storage.raffleAddress '245 b
        b{011000} STSLICECONST	//  storage.raffleAddress '245 b
        s1 s2 XCHG          	//  '245 storage.raffleAddress b
        STSLICE             	//  '245 b
        1 PUSHINT
        111 STUR            	//  '245 b
        STREF               	//  b
        ENDC                	//  approveMessage
        // 55: reserveToncoinsOnBalance(MIN_TONS_FOR_RAFFLE_CANDIDATE_STORAGE, RESERVE_MODE_EXACT_AMOUNT)
        5000000 PUSHINT     	//  approveMessage '283=5000000
        0 PUSHINT           	//  approveMessage '283=5000000 '284=0
        RAWRESERVE          	//  approveMessage
        // 56: approveMessage.send(SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_BOUNCE_ON_ACTION_FAIL)
        144 PUSHINT         	//  approveMessage '287
        SENDRAWMSG          	// 
      }>ELSE<{              	//  inMessageBody.USlot1 storage.raffleAddress storage.userAddress
        2DROP               	//  inMessageBody.USlot1
        // 62: body: createEmptyCell()
        <b b> PUSHREF       	//  inMessageBody.USlot1 '300
        // 58: val excessMessage = createMessage(
        NEWC                	//  inMessageBody.USlot1 '300 b
        b{010000} STSLICECONST	//  inMessageBody.USlot1 '300 b
        s1 s2 XCHG          	//  '300 inMessageBody.USlot1 b
        STSLICE             	//  '300 b
        1 PUSHINT
        111 STUR            	//  '300 b
        STREF               	//  b
        ENDC                	//  excessMessage
        // 65: reserveToncoinsOnBalance(MIN_TONS_FOR_RAFFLE_CANDIDATE_STORAGE, RESERVE_MODE_EXACT_AMOUNT)
        5000000 PUSHINT     	//  excessMessage '350=5000000
        0 PUSHINT           	//  excessMessage '350=5000000 '351=0
        RAWRESERVE          	//  excessMessage
        // 66: excessMessage.send(SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_IGNORE_ERRORS)
        130 PUSHINT         	//  excessMessage '354
        SENDRAWMSG          	// 
      }>
    }>                      	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID storage.participantIndex lazyS
    // 17: match (inMessageBody)
    NIP                     	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID lazyS
    x{13370023} SDBEGINSQ   	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID lazyS '77
    IFJMP:<{                	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID lazyS
      // 70: storage.participantIndex = inMessageBody.participantIndex
      s6 POP                	//  lazyS storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID
      s0 s5 XCHG            	//  storage.telegramID storage.raffleAddress storage.userAddress storage.conditions storage.isMatched lazyS
      64 PLDU               	//  storage.telegramID storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.participantIndex
      // 49: contract.setData(self.toCell())
      s0 s4 XCHG
      NEWC                  	//  storage.telegramID storage.participantIndex storage.userAddress storage.conditions storage.isMatched storage.raffleAddress b
      STSLICE               	//  storage.telegramID storage.participantIndex storage.userAddress storage.conditions storage.isMatched b
      s1 s3 XCHG            	//  storage.telegramID storage.participantIndex storage.isMatched storage.conditions storage.userAddress b
      STSLICE               	//  storage.telegramID storage.participantIndex storage.isMatched storage.conditions b
      OVER                  	//  storage.telegramID storage.participantIndex storage.isMatched storage.conditions b storage.conditions
      SBITREFS              	//  storage.telegramID storage.participantIndex storage.isMatched storage.conditions b '361 '362
      9 THROWIF             	//  storage.telegramID storage.participantIndex storage.isMatched storage.conditions b '361
      8 PUSHPOW2            	//  storage.telegramID storage.participantIndex storage.isMatched storage.conditions b '361 '366=256
      EQUAL                 	//  storage.telegramID storage.participantIndex storage.isMatched storage.conditions b '365
      9 THROWIFNOT          	//  storage.telegramID storage.participantIndex storage.isMatched storage.conditions b
      STSLICE               	//  storage.telegramID storage.participantIndex storage.isMatched b
      1 STI                 	//  storage.telegramID storage.participantIndex b
      s2 PUSH               	//  storage.telegramID storage.participantIndex b storage.telegramID
      ISNULL                	//  storage.telegramID storage.participantIndex b '369
      IF:<{                 	//  storage.telegramID storage.participantIndex b
        1 2 BLKDROP2        	//  storage.participantIndex b
        b{0} STSLICECONST   	//  storage.participantIndex b
      }>ELSE<{              	//  storage.telegramID storage.participantIndex b
        b{1} STSLICECONST   	//  storage.telegramID storage.participantIndex b
        s1 s2 XCHG          	//  storage.participantIndex storage.telegramID b
        64 STU              	//  storage.participantIndex b
      }>
      OVER                  	//  storage.participantIndex b storage.participantIndex
      ISNULL                	//  storage.participantIndex b '375
      IF:<{                 	//  storage.participantIndex b
        NIP                 	//  b
        b{0} STSLICECONST   	//  b
      }>ELSE<{              	//  storage.participantIndex b
        b{1} STSLICECONST   	//  storage.participantIndex b
        64 STU              	//  b
      }>
      ENDC                  	//  '381
      c4 POP                	// 
    }>                      	//  in.body storage.raffleAddress storage.userAddress storage.conditions storage.isMatched storage.telegramID lazyS
    6 BLKDROP               	//  in.body
    // 74: assert (inMessage.body.isEmpty()) throw ERROR_WRONG_OPCODE
    16 PUSHPOW2DEC          	//  in.body '382=65535
    SWAP                    	//  '382=65535 in.body
    SEMPTY                  	//  '382=65535 '383
    THROWANYIFNOT           	// 
  }>
  // contracts/raffle-candidate.tolk:90:5
  raffleCandidateData() PROC:<{	// 
    // 45: return RaffleCandidateStorage.fromCell(contract.getData())
    c4 PUSH                 	//  '7
    // 91: val storage = lazy RaffleCandidateStorage.load()
    CTOS                    	//  lazyS
    // 92: return (storage.conditions, storage.telegramID, storage.participantIndex)
    LDMSGADDR               	//  '11 lazyS
    NIP                     	//  lazyS
    LDMSGADDR               	//  '12 lazyS
    NIP                     	//  lazyS
    256 LDSLICE             	//  storage.conditions lazyS
    1 LDU
    NIP                     	//  storage.conditions lazyS
    1 LDU                   	//  storage.conditions '18 lazyS
    SWAP                    	//  storage.conditions lazyS '18
    IF:<{                   	//  storage.conditions lazyS
      64 LDU                	//  storage.conditions '16 lazyS
    }>ELSE<{                	//  storage.conditions lazyS
      PUSHNULL              	//  storage.conditions lazyS '16
      SWAP                  	//  storage.conditions '16 lazyS
    }>                      	//  storage.conditions storage.telegramID lazyS
    1 LDU                   	//  storage.conditions storage.telegramID '24 lazyS
    SWAP                    	//  storage.conditions storage.telegramID lazyS '24
    IF:<{                   	//  storage.conditions storage.telegramID lazyS
      64 PLDU               	//  storage.conditions storage.telegramID '22
    }>ELSE<{                	//  storage.conditions storage.telegramID lazyS
      DROP                  	//  storage.conditions storage.telegramID
      PUSHNULL              	//  storage.conditions storage.telegramID '22
    }>                      	//  storage.conditions storage.telegramID storage.participantIndex
  }>
}END>c
